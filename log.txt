Log


### Class names
#   2013-12-07
    LabeledShape
        Shape
            LinePartition (dict)        as attribute: line_part; module: rename
                Colineation             as attribute: lines (list)
                    Line
        LPointPartition (dict)          as attribute: lpoint_part; module: rename
            Colabeling                  as attribute: lpoint_specs (set)
                LabeledPoint
                    Point

### ElementCell class
#   2013-12-10
    Analogous methods from SGColumn and SGColabeling:
        __init__()                      __init__()
        collinear()                     colabeled()
        get_maximal_lines_from()        (set.add())
        maximal()                       (set)
        __str__()                       __str__()
        listing()                       listing()
    But this doesn't seem like enough to justify creating a parent class.
    Conclusion: abandon ElementCell.

### Colabeling
#   2013-12-10
    Why implement the collection as a set of lpoint specs
    1.  As a set of LabeledPoint objects. Problem: a set does not use an 
        element's __eq__ method
    2.  As a list of lpoints. Problem: have to implement equivalent methods to
        set methods
    3.  As a set of lpoint specs. Problem: have to unpack and repack lpoints

#   2014-01-06
    Implement __add__()?

#   2014-01-07
    Colabeling. Rename lpoint_list and lpoint_spec_set? #### Yes, do this!

    __init__() should accept the same types as its attributes? Then use factory 
    class methods for other types of arguments. E.g., 
        Colabeling.__init__(self, lpoint_spec_set), not 
        Colabeling.__init__(self, lpoint_list)
    This might reduce the number of conversions. 
    
    LabeledShape.__sub__() alters other. Check __sub__() of subordinate 
    classes. Check other tests

#   2014-01-12
    Invariants / design by contract. Receives / returns / maintains 

#   2014-01-13
    What to do about attribute names that are the same as module names, e.g., 
    LabeledShape.shape?

#   2014-01-15
    LabeledPoint: (label, x, y) instead of (x, y, label)?
    listing with variable decimal places
    
#   2014-01-16
    Shape subtraction problem
    ---v ok
    --h- ok
    --hv ok
    -v-- ok
    -v-v ok
    -vh- ok
    h--- ok
    h--v ok
    h-h- ok
    h-hv ok
    hv-- ok
    hvh- ok
    -vhv not ok [(40, 20, 40, 40), (40, 60, 40, 80), (20, 60, 40, 60)]
    hv-v not ok [(40, 20, 40, 40), (40, 60, 40, 80), (20, 40, 40, 40)]
    hvhv not ok [(40, 20, 40, 40), (40, 60, 40, 80), (20, 40, 40, 40), (20, 60, 40, 60)]
    
    -v-v {(0, 40): []                            }
    -vhv {(0, 40): [],               (90, 60): []}
    hv-v {(0, 40): [], (90, 40): []              }
    hvhv {(0, 40): [], (90, 40): [], (90, 60): []}

    Cause: The elements were assumed to be sorted, but were not.
    Solution: Sort the elements at initialization.

#   2014-02-15
    #   Listing. Revise to allow a variable number of decimal places. 
        Implemented
    #   Point.get_formatted_coord()
    #   Completed 2014-02-26 
    >   Invariants.

#   2014-02-19
    #   Implement value and type checking for arguments. Finished 2014-03-22
    
#   2014-02-26
    #   Rename "protected" methods: method() --> _method(). Finished 
        2014-03-22

#   2014-03-01
    #   Revise error messages: <class name>.<method name>: <message>.
        Finished 2014-03-22

#   2014-03-03
    >   Implement _print_error_message(). Make a parent object with this as a
        method?

#   2014-03-06
    >   Colabeling. Refactor specs() as an attribute? To complement specs_set. 
    >   Colabeling.union(). Refactor as __add__() or __or__()?

#   2014-03-07
    #   Colabeling.get_lpoint_listing(). Shouldn't this be a method of 
        LabeledPoint? No, because it takes a spec and is used only by 
        Colabeling.

#   2014-03-09
    #   LabeledPoint. Allow empty labels? Done
    #   Implement are_specs(cls). Done 2014-03-10
    
#   2014-03-13
    >   List comprehensions. Implement
    #   Line.from_spec(). Fixed by revising Point.__init__() to include 
        self.__del__(). 2014-03-17. Reversed 2014-03-18.

#   2014-03-18
    >   trace_on. Revise

#   2014-03-19
    #   Checks on arguments to methods. Should these be implemented on all 
        methods that are called by other objects? E.g., __add__, __eq__. 
        2014-03-29. No. Stick to initializers for the moment
    
#   2014-03-22
    #   listing(). Limit decimal_places parameter to integers. Done 2014-03-28
    >   LabeledPoint.__init__(). Revise parameters to point and label?

#   2014-04-12
    >   Next steps
        1   Graphic lshape library
        2   Rhino translator
        3   Rules. Need visualizer
        4   Model._set_to_empty(lshape)?
        
#   2014-05-23
    #   Rhino translator (shape only) completed

#   2014-06-12
    #   Rhino rule translator exporter completed
    #   Allow empty right shape. Done 2014-06-12
    #   Rewrite exporters to combine methods. Done 2014-06-13
    #   Check for ill-formed names. Done 2014-06-13
    #   Resize shapes before importing. Abandoned 2014-06-13
    >   Make thumbnails

#   2014-06-16
    >   Rule shape names don't appear in the interpreter

#   2014-07-17
    #   Rhino rule importer completed
    >   Rule importer tests. Clean up
    >   Implement Rhino derivation importer
    >   Implement Derivation class. 
    >   Does the Derivation class include the grammar? Or just the sequence of 
        shapes and rules? For now, let's include just the sequence. 

#   2014-07-23
    >   The derivation produced by the interpreter shows the values of coord 
        indices, but they're supposed to be integers!
            coords 10 0 4 2.16840434497101e-016
            coords 11 4 4 2.16840434497101e-016
            coords 12 4 4 2
            coords 13 0 4.33680868994202e-016 2
            coords 14 0 4 2
            coords 15 4 4.33680868994202e-016 2
            coords 16 0 4.33680868994202e-016 2.16840434497101e-016
            coords 17 4 4.33680868994202e-016 2.16840434497101e-016
            coords 9 0 2 1
    >   The derivation object should be called something else, since it 
        contains both the grammar (initial shape and rules) and the 
        "derivation record" (the "actual" derivation). 

#   2014-09-06
    >   The drv file from interpreter sometimes lists a coord triple more than 
        once. So lines meeting at the same point sometimes have different 
        coord indices. Disturbing, but no apparent harm. Yet. 
        
#   2014-09-11
    >   Importer.import_derivation. Chokes when a derivation rule name is not
        in the grammar rule dictionary. This happens when the rule names are 
        different, although I don't know exactly how that happens.

#   2014-09-16
    >   In the drv file, the name of the rule in the derivation sometimes 
        doesn't appear. It seems to happen when the rule application is deterministic, i.e., when there was only the one rule that could be 
        applied. E.g., parallel-lines-2014-08-27.drv
    >   In the drv file, a next shape is sometimes repeated. Don't see a 
        reason. 

#   2014-09-17
    >   In some drv files, derivation subfile, the first several rules are 
        unnamed and the remaining rules all have (the same) rule name that is 
        not in the grammar. Example: jigsaw-02-step-01-2014-08-28.drv
    
#   2014-09-27
    >   Derivation. Should this refer to the derivation file, which includes 
        the grammar? Or only to the derivation narrowly defined, i.e., the 
        sequence of shapes from initial to final? The interpreter command 
        "save derivation" uses the broad definition. 

#   2014-10-16
    >   __repr__ strings. Revise to make them runnable by eval. In unit tests, 
        try checking that eval(repr(foo)) == foo. 
        
#   2014-10-31
    >   Derivation. It has meaning only in the presence of a grammar object. 
        So why exactly should it exist as an independent object? Or can its 
        rule shape attributes point to a grammar object? Or, one of its 
        attributes should be a grammar object? That would make sense. Then, 
        such a derivation object sounds like a rich derivation object! 

#   2014-12-02
    >   Be careful of the names shape and labeled shape. I've been using the
        first in the model code and the second in the Rhino code.
        