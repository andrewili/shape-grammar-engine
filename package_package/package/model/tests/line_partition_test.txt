    >>> import colineation
    >>> import copy
    >>> import line
    >>> import line_partition
    >>> import point
    >>> import vector

    ??? partition_drone = line_partition.LinePartition([])

### construct
#   __init__
    >>> def set_up_init_1():
    ...     bad_type_non_list = 'kilroy'
    ...     bad_type_non_lines = ['kilroy']
    ...     empty_list = []
    ...     return (bad_type_non_list, bad_type_non_lines, empty_list)
    >>> bad_type_non_list, bad_type_non_lines, empty_list = set_up_init_1()
    >>> line_part_non_list = line_partition.LinePartition(bad_type_non_list)
    LinePartition.__init__:
        The argument must be a list of lines
    >>> line_part_non_lines = line_partition.LinePartition(bad_type_non_lines)
    LinePartition.__init__:
        The argument must be a list of lines
    >>> line_part_empty_list = line_partition.LinePartition(empty_list)
    >>> line_part_empty_list.dictionary
    {}
    >>> def set_up_init_2():
    ...     l000002 = line.Line.from_spec(0, 0, 0, 0, 0, 2)
    ...     l000020 = line.Line.from_spec(0, 0, 0, 0, 2, 0)
    ...     l000200 = line.Line.from_spec(0, 0, 0, 2, 0, 0)
    ...     l001002 = line.Line.from_spec(0, 0, 1, 0, 0, 2)
    ...     l003005 = line.Line.from_spec(0, 0, 3, 0, 0, 5)
    ...     l010060 = line.Line.from_spec(0, 1, 0, 0, 6, 0)
    ...     l011211 = line.Line.from_spec(0, 1, 1, 2, 1, 1)
    ...     l030050 = line.Line.from_spec(0, 3, 0, 0, 5, 0)
    ...     l100300 = line.Line.from_spec(1, 0, 0, 3, 0, 0)
    ...     l101121 = line.Line.from_spec(1, 0, 1, 1, 2, 1)
    ...     l110112 = line.Line.from_spec(1, 1, 0, 1, 1, 2)
    ...     l111112 = line.Line.from_spec(1, 1, 1, 1, 1, 2)
    ...     l111131 = line.Line.from_spec(1, 1, 1, 1, 3, 1)
    ...     l113115 = line.Line.from_spec(1, 1, 3, 1, 1, 5)
    ...     l141161 = line.Line.from_spec(1, 4, 1, 1, 6, 1)
    ...     l211411 = line.Line.from_spec(2, 1, 1, 4, 1, 1)
    ...     l400600 = line.Line.from_spec(4, 0, 0, 6, 0, 0)
    ...     l511711 = line.Line.from_spec(5, 1, 1, 7, 1, 1)
    ...     x0ol = lines_x_intercept_0_overlapping =    [l000200, l100300]
    ...     x0dj = lines_x_intercept_0_disjoint =       [l000200, l400600]
    ...     x1ol = lines_x_intercept_1_overlapping =    [l011211, l211411]
    ...     x1dj = lines_x_intercept_1_disjoint =       [l011211, l511711]
    ...     y0ol = lines_y_intercept_0_overlapping =    [l000020, l010060]
    ...     y0dj = lines_y_intercept_0_disjoint =       [l000020, l030050]
    ...     y1ol = lines_y_intercept_1_overlapping =    [l101121, l111131]
    ...     y1dj = lines_y_intercept_1_disjoint =       [l101121, l141161]
    ...     z0ol = lines_z_intercept_0_overlapping =    [l000002, l001002]
    ...     z0dj = lines_z_intercept_0_disjoint =       [l000002, l003005]
    ...     z1ol = lines_z_intercept_1_overlapping =    [l110112, l111112]
    ...     z1dj = lines_z_intercept_1_disjoint =       [l110112, l113115]
    ...     lines_1 = []
    ...     for lines in [x0ol, x1dj, y0ol, y1dj, z0ol, z1dj]:
    ...         lines_1.extend(lines)
    ...     lines_2 = []
    ...     for lines in [x0dj, x1ol, y0dj, y1ol, z0dj, z1ol]:
    ...         lines_2.extend(lines)
    ...     return (
    ...         lines_1, lines_2)
    >>> lines_1, lines_2 = set_up_init_2()

    >>> line_part_1 = line_partition.LinePartition(lines_1)
    >>> dict_1 = line_part_1.dictionary
    >>> for carrier in sorted(dict_1):
    ...     uv, int = carrier
    ...     colin = dict_1[carrier]
    ...     line_strs = []
    ...     for line_i in colin.lines:
    ...         line_strs.append(line_i.listing())
    ...     lines_str = ', '.join(line_strs)
    ...     print('(%s, %s): [%s]' % (uv, int.listing(), lines_str))
    ([ 0.  0.  1.], (0, 0, 0)): [((0, 0, 0), (0, 0, 2))]
    ([ 0.  0.  1.], (1, 1, 0)): [((1, 1, 0), (1, 1, 2)), ((1, 1, 3), (1, 1, 5))]
    ([ 0.  1.  0.], (0, 0, 0)): [((0, 0, 0), (0, 6, 0))]
    ([ 0.  1.  0.], (1, 0, 1)): [((1, 0, 1), (1, 2, 1)), ((1, 4, 1), (1, 6, 1))]
    ([ 1.  0.  0.], (0, 0, 0)): [((0, 0, 0), (3, 0, 0))]
    ([ 1.  0.  0.], (0, 1, 1)): [((0, 1, 1), (2, 1, 1)), ((5, 1, 1), (7, 1, 1))]

    >>> line_part_2 = line_partition.LinePartition(lines_2)
    >>> dict_2 = line_part_2.dictionary
    >>> for carrier in sorted(dict_2):
    ...     uv, int = carrier
    ...     colin = dict_2[carrier]
    ...     line_strs = []
    ...     for line_i in colin.lines:
    ...         line_strs.append(line_i.listing())
    ...     lines_str = ', '.join(line_strs)
    ...     print('(%s, %s): [%s]' % (uv, int.listing(), lines_str))
    ([ 0.  0.  1.], (0, 0, 0)): [((0, 0, 0), (0, 0, 2)), ((0, 0, 3), (0, 0, 5))]
    ([ 0.  0.  1.], (1, 1, 0)): [((1, 1, 0), (1, 1, 2))]
    ([ 0.  1.  0.], (0, 0, 0)): [((0, 0, 0), (0, 2, 0)), ((0, 3, 0), (0, 5, 0))]
    ([ 0.  1.  0.], (1, 0, 1)): [((1, 0, 1), (1, 3, 1))]
    ([ 1.  0.  0.], (0, 0, 0)): [((0, 0, 0), (2, 0, 0)), ((4, 0, 0), (6, 0, 0))]
    ([ 1.  0.  0.], (0, 1, 1)): [((0, 1, 1), (4, 1, 1))]

#   _are_lines(elements)
    >>> def elements_for_are_lines_test():
    ...     l01 = line.Line.from_spec_2(0, 1)
    ...     l34 = line.Line.from_spec_2(3, 4)
    ...     p22 = point.Point(2, 2)
    ...     lines = [l34, l01]
    ...     lines_and_points = [l34, p22, l01]
    ...     return [lines, lines_and_points]
    >>> lines, lines_and_points = elements_for_are_lines_test()
    >>> line_partition.LinePartition._are_lines(lines_and_points)
    False
    >>> line_partition.LinePartition._are_lines(lines)
    True

#   _make_dictionary
    >>> def set_up_make_dictionary():
    ...     lines_1, lines_2 = set_up_init_2()
    ...     make_dict_of_colines = (
    ...         line_partition.LinePartition._make_dict_of_colines)
    ...     make_dict_of_colins = (
    ...         line_partition.LinePartition._make_dict_of_colineations)
    ...     return (
    ...         lines_1, lines_2, 
    ...         make_dict_of_colines, make_dict_of_colins)
    >>> (lines_1, lines_2, make_dict_of_colines, make_dict_of_colins) = (
    ...     set_up_make_dictionary())

#   _make_dict_of_colines
    >>> dict_colines_1 = make_dict_of_colines(lines_1)
    >>> for carrier in sorted(dict_colines_1.keys()):
    ...     uv, int = carrier
    ...     coline_listings = []
    ...     colines = dict_colines_1[carrier]
    ...     for coline in sorted(colines):
    ...         coline_listings.append(coline.listing())
    ...     colines_str = ', '.join(coline_listings)
    ...     print('(%s, %s): [%s]' % (uv, int.listing(), colines_str))
    ([ 0.  0.  1.], (0, 0, 0)): [((0, 0, 0), (0, 0, 2)), ((0, 0, 1), (0, 0, 2))]
    ([ 0.  0.  1.], (1, 1, 0)): [((1, 1, 0), (1, 1, 2)), ((1, 1, 3), (1, 1, 5))]
    ([ 0.  1.  0.], (0, 0, 0)): [((0, 0, 0), (0, 2, 0)), ((0, 1, 0), (0, 6, 0))]
    ([ 0.  1.  0.], (1, 0, 1)): [((1, 0, 1), (1, 2, 1)), ((1, 4, 1), (1, 6, 1))]
    ([ 1.  0.  0.], (0, 0, 0)): [((0, 0, 0), (2, 0, 0)), ((1, 0, 0), (3, 0, 0))]
    ([ 1.  0.  0.], (0, 1, 1)): [((0, 1, 1), (2, 1, 1)), ((5, 1, 1), (7, 1, 1))]
    >>> dict_colines_2 = make_dict_of_colines(lines_2)
    >>> for carrier in sorted(dict_colines_2.keys()):
    ...     uv, int = carrier
    ...     coline_listings = []
    ...     colines = dict_colines_2[carrier]
    ...     for coline in sorted(colines):
    ...         coline_listings.append(coline.listing())
    ...     colines_str = ', '.join(coline_listings)
    ...     print('(%s, %s): [%s]' % (uv, int.listing(), colines_str))
    ([ 0.  0.  1.], (0, 0, 0)): [((0, 0, 0), (0, 0, 2)), ((0, 0, 3), (0, 0, 5))]
    ([ 0.  0.  1.], (1, 1, 0)): [((1, 1, 0), (1, 1, 2)), ((1, 1, 1), (1, 1, 2))]
    ([ 0.  1.  0.], (0, 0, 0)): [((0, 0, 0), (0, 2, 0)), ((0, 3, 0), (0, 5, 0))]
    ([ 0.  1.  0.], (1, 0, 1)): [((1, 0, 1), (1, 2, 1)), ((1, 1, 1), (1, 3, 1))]
    ([ 1.  0.  0.], (0, 0, 0)): [((0, 0, 0), (2, 0, 0)), ((4, 0, 0), (6, 0, 0))]
    ([ 1.  0.  0.], (0, 1, 1)): [((0, 1, 1), (2, 1, 1)), ((2, 1, 1), (4, 1, 1))]

#   _make_dict_of_colineations
    >>> make_dict_of_colins = (
    ...     line_partition.LinePartition._make_dict_of_colineations)
    >>> dict_colins_1 = make_dict_of_colins(dict_colines_1)
    >>> for carrier in sorted(dict_colins_1):
    ...     uv, int = carrier
    ...     colin = dict_colins_1[carrier]
    ...     line_strs = []
    ...     for line_i in colin.lines:
    ...         line_strs.append(line_i.listing())
    ...     lines_str = ', '.join(line_strs)
    ...     print('(%s, %s): [%s]' % (uv, int.listing(), lines_str))
    ([ 0.  0.  1.], (0, 0, 0)): [((0, 0, 0), (0, 0, 2))]
    ([ 0.  0.  1.], (1, 1, 0)): [((1, 1, 0), (1, 1, 2)), ((1, 1, 3), (1, 1, 5))]
    ([ 0.  1.  0.], (0, 0, 0)): [((0, 0, 0), (0, 6, 0))]
    ([ 0.  1.  0.], (1, 0, 1)): [((1, 0, 1), (1, 2, 1)), ((1, 4, 1), (1, 6, 1))]
    ([ 1.  0.  0.], (0, 0, 0)): [((0, 0, 0), (3, 0, 0))]
    ([ 1.  0.  0.], (0, 1, 1)): [((0, 1, 1), (2, 1, 1)), ((5, 1, 1), (7, 1, 1))]
    >>> dict_colins_2 = make_dict_of_colins(dict_colines_2)
    >>> for carrier in sorted(dict_colins_2):
    ...     uv, int = carrier
    ...     colin = dict_colins_2[carrier]
    ...     line_strs = []
    ...     for line_i in colin.lines:
    ...         line_strs.append(line_i.listing())
    ...     lines_str = ', '.join(line_strs)
    ...     print('(%s, %s): [%s]' % (uv, int.listing(), lines_str))
    ([ 0.  0.  1.], (0, 0, 0)): [((0, 0, 0), (0, 0, 2)), ((0, 0, 3), (0, 0, 5))]
    ([ 0.  0.  1.], (1, 1, 0)): [((1, 1, 0), (1, 1, 2))]
    ([ 0.  1.  0.], (0, 0, 0)): [((0, 0, 0), (0, 2, 0)), ((0, 3, 0), (0, 5, 0))]
    ([ 0.  1.  0.], (1, 0, 1)): [((1, 0, 1), (1, 3, 1))]
    ([ 1.  0.  0.], (0, 0, 0)): [((0, 0, 0), (2, 0, 0)), ((4, 0, 0), (6, 0, 0))]
    ([ 1.  0.  0.], (0, 1, 1)): [((0, 1, 1), (4, 1, 1))]

#   from_dictionary(dictionary)
    ??? def make_line_partition_for_dictionary_test():
    ...     line_0001 = line.Line.from_spec(0, 0, 0, 1)
    ...     line_0010 = line.Line.from_spec(0, 0, 1, 0)
    ...     line_0011 = line.Line.from_spec(0, 0, 1, 1)
    ...     lines = [line_0011, line_0010, line_0001]
    ...     line_partition_helper = line_partition.LinePartition(lines)
    ...     new_dictionary = line_partition_helper.dictionary
    ...     new_line_partition = line_partition.LinePartition.from_dictionary(new_dictionary)
    ...     return new_line_partition
    ??? new_line_partition = make_line_partition_for_dictionary_test()

    ??? print new_line_partition
    [(0, 0, 0, 1), (0, 0, 1, 0), (0, 0, 1, 1)]

### represent
#   __str__
    >>> str(line_part_1)
    ([ 0.  0.  1.], (0, 0, 0)): [((0, 0, 0), (0, 0, 2))]
    ([ 0.  0.  1.], (1, 1, 0)): [((1, 1, 0), (1, 1, 2)), ((1, 1, 3), (1, 1, 5))]
    ([ 0.  1.  0.], (0, 0, 0)): [((0, 0, 0), (0, 6, 0))]
    ([ 0.  1.  0.], (1, 0, 1)): [((1, 0, 1), (1, 2, 1)), ((1, 4, 1), (1, 6, 1))]
    ([ 1.  0.  0.], (0, 0, 0)): [((0, 0, 0), (3, 0, 0))]
    ([ 1.  0.  0.], (0, 1, 1)): [((0, 1, 1), (2, 1, 1)), ((5, 1, 1), (7, 1, 1))]

    >>> str(line_part_2)
    ([ 0.  0.  1.], (0, 0, 0)): [((0, 0, 0), (0, 0, 2)), ((0, 0, 3), (0, 0, 5))]
    ([ 0.  0.  1.], (1, 1, 0)): [((1, 1, 0), (1, 1, 2))]
    ([ 0.  1.  0.], (0, 0, 0)): [((0, 0, 0), (0, 2, 0)), ((0, 3, 0), (0, 5, 0))]
    ([ 0.  1.  0.], (1, 0, 1)): [((1, 0, 1), (1, 3, 1))]
    ([ 1.  0.  0.], (0, 0, 0)): [((0, 0, 0), (2, 0, 0)), ((4, 0, 0), (6, 0, 0))]
    ([ 1.  0.  0.], (0, 1, 1)): [((0, 1, 1), (4, 1, 1))]

#   listing

### get
#   specs()

    ??? def make_lparts_for_specs():
    ...     lpart_0 = line_partition.LinePartition([])
    ...     line_0001 = line.Line.from_spec(0, 0, 0, 1)
    ...     line_0010 = line.Line.from_spec(0, 0, 1, 0)
    ...     line_0011 = line.Line.from_spec(0, 0, 1, 1)
    ...     line_2233 = line.Line.from_spec(2, 2, 3, 3)
    ...     lines = [line_0001, line_0010, line_0011, line_2233]
    ...     lpart_1 = line_partition.LinePartition(lines)
    ...     return [lpart_0, lpart_1]
    ??? lpart_0, lpart_1 = make_lparts_for_specs()
    ??? print lpart_0.specs()
    []
    ??? print lpart_1.specs()
    [(0, 0, 0, 1), (0, 0, 1, 0), (0, 0, 1, 1), (2, 2, 3, 3)]


### relations
#   __eq__()
#   __ne__()

    ??? l_vert = line.Line.from_spec(0, 0, 0, 10)
    ??? l_horiz = line.Line.from_spec(0, 0, 5, 0)
    ??? l_lines = [l_vert, l_horiz]
    ??? t_horiz = line.Line.from_spec(0, 10, 10, 10)
    ??? t_vert = line.Line.from_spec(5, 0, 5, 10)
    ??? t_lines = [t_horiz, t_vert]

    ??? partition_l_1 = line_partition.LinePartition(l_lines)
    ??? partition_l_2 = line_partition.LinePartition(l_lines)
    ??? partition_t = line_partition.LinePartition(t_lines)
    
    ??? print partition_l_1
    [(0, 0, 0, 10), (0, 0, 5, 0)]
    ??? print partition_l_2
    [(0, 0, 0, 10), (0, 0, 5, 0)]

    ??? partition_l_1 == partition_l_2
    True
    ??? partition_l_1 == partition_t
    False
    ??? partition_l_1 != partition_l_2
    False
    ??? partition_l_1 != partition_t
    True

    ??? line_01 = line.Line.from_short_spec(0, 1)
    ??? non_empty_partition = line_partition.LinePartition([line_01])

    ??? empty_partition.is_empty()
    True
    ??? non_empty_partition.is_empty()
    False

#   colineations_are_subcolineations_in()
#   is_a_sub_line_partition_of()
    ??? def make_partitions_for_subcolineations():
    ...     line_0001 = line.Line.from_spec(0, 0, 0, 1)
    ...     line_0002 = line.Line.from_spec(0, 0, 0, 2)
    ...     line_0010 = line.Line.from_spec(0, 0, 1, 0)
    ...     line_0020 = line.Line.from_spec(0, 0, 2, 0)
    ...     line_0022 = line.Line.from_spec(0, 0, 2, 2)
    ...     test_partition_0001_0010 = line_partition.LinePartition([line_0001, line_0010])
    ...     partition_0002_0022 = line_partition.LinePartition([line_0002, line_0022])
    ...     partition_0002_0020 = line_partition.LinePartition([line_0002, line_0020])
    ...     partition_0022_0020 = line_partition.LinePartition([line_0022, line_0020])
    ...     partition_0002_0022_0020 = line_partition.LinePartition([line_0002, line_0022, line_0020])
    ...     return [test_partition_0001_0010, partition_0002_0022, partition_0002_0020, partition_0022_0020, partition_0002_0022_0020]

    ??? test_partition_0001_0010, partition_0002_0022, partition_0002_0020, partition_0022_0020, partition_0002_0022_0020 = make_partitions_for_subcolineations()
    ??? test_partition_0001_0010.colineations_are_subcolineations_in(partition_0002_0022)
    False
    ??? test_partition_0001_0010.colineations_are_subcolineations_in(partition_0002_0020)
    True
    ??? test_partition_0001_0010.colineations_are_subcolineations_in(partition_0022_0020)
    False
    ??? test_partition_0001_0010.is_a_sub_line_partition_of(partition_0002_0022_0020)
    True

    ??? test_partition_0001_0010.is_a_sub_line_partition_of(partition_0002_0022)
    False
    ??? test_partition_0001_0010.is_a_sub_line_partition_of(partition_0002_0020)
    True
    ??? test_partition_0001_0010.is_a_sub_line_partition_of(partition_0022_0020)
    False
    ??? test_partition_0001_0010.is_a_sub_line_partition_of(partition_0002_0022_0020)
    True

### add
#   __add__(other)

    ??? def partitions_for_add_test():
    ...     empty_partition_1 = line_partition.LinePartition([])
    ...     empty_partition_2 = line_partition.LinePartition([])
    ...     line_0002 = line.Line.from_spec(0, 0, 0, 2)
    ...     line_0020 = line.Line.from_spec(0, 0, 2, 0)
    ...     line_0011 = line.Line.from_spec(0, 0, 1, 1)
    ...     line_1122 = line.Line.from_spec(1, 1, 2, 2)
    ...     full_partition_1 = line_partition.LinePartition([line_0011, line_0002])
    ...     full_partition_2 = line_partition.LinePartition([line_1122, line_0020])
    ...     return (empty_partition_1, empty_partition_2, full_partition_1, full_partition_2)
    ??? empty_partition_1, empty_partition_2, full_partition_1, full_partition_2 = partitions_for_add_test()
    ??? empty_empty_partition = empty_partition_1 + empty_partition_2
    ??? full_empty_partition = full_partition_1 + empty_partition_1
    ??? empty_full_partition = empty_partition_1 + full_partition_1
    ??? full_full_partition = full_partition_1 + full_partition_2

    ??? print empty_empty_partition
    []
    ??? print empty_empty_partition.listing()
    <empty line partition>
    ??? print full_empty_partition
    [(0, 0, 0, 2), (0, 0, 1, 1)]
    ??? print full_empty_partition.listing()
    (0, 0):
        (0, 0, 0, 2)
    (45, 0):
        (0, 0, 1, 1)
    ??? print empty_full_partition
    [(0, 0, 0, 2), (0, 0, 1, 1)]
    ??? print empty_full_partition.listing()
    (0, 0):
        (0, 0, 0, 2)
    (45, 0):
        (0, 0, 1, 1)
    ??? print full_full_partition
    [(0, 0, 0, 2), (0, 0, 2, 0), (0, 0, 2, 2)]
    ??? print full_full_partition.listing()
    (0, 0):
        (0, 0, 0, 2)
    (45, 0):
        (0, 0, 2, 2)
    (90, 0):
        (0, 0, 2, 0)

### subtract
#   __sub__(other)                                                          #   back to shape.__sub__

    ??? def make_line_parts_for_sub():
    ...     lpart_01 = line_partition.LinePartition([])
    ...     lpart_02 = line_partition.LinePartition([])
    ...     line_0001 = line.Line.from_spec(0, 0, 0, 1)
    ...     line_0020 = line.Line.from_spec(0, 0, 2, 0)
    ...     line_0022 = line.Line.from_spec(0, 0, 2, 2)
    ...     line_1133 = line.Line.from_spec(1, 1, 3, 3)
    ...     line_3040 = line.Line.from_spec(3, 0, 4, 0)
    ...     lpart_11 = line_partition.LinePartition([line_0001, line_0022, line_0020])
    ...     lpart_12 = line_partition.LinePartition([line_0001, line_1133, line_3040])
    ...     return [lpart_01, lpart_02, lpart_11, lpart_12]
    ??? lpart_01, lpart_02, lpart_11, lpart_12 = make_line_parts_for_sub()

    ??? print lpart_11
    [(0, 0, 0, 1), (0, 0, 2, 0), (0, 0, 2, 2)]

    ??? diff_0102 = lpart_01 - lpart_02
    ??? print lpart_11
    [(0, 0, 0, 1), (0, 0, 2, 0), (0, 0, 2, 2)]
    ??? print diff_0102.listing()
    <empty line partition>

    ??? diff_0111 = lpart_01 - lpart_11
    ??? print lpart_11
    [(0, 0, 0, 1), (0, 0, 2, 0), (0, 0, 2, 2)]
    ??? print diff_0111.listing()
    <empty line partition>

    ??? diff_0112 = lpart_01 - lpart_12
    ??? print lpart_11
    [(0, 0, 0, 1), (0, 0, 2, 0), (0, 0, 2, 2)]
    ??? print diff_0112.listing()
    <empty line partition>

    ??? diff_1101 = lpart_11 - lpart_01
    ??? print lpart_11
    [(0, 0, 0, 1), (0, 0, 2, 0), (0, 0, 2, 2)]
    ??? print diff_1101.listing()
    (0, 0):
        (0, 0, 0, 1)
    (45, 0):
        (0, 0, 2, 2)
    (90, 0):
        (0, 0, 2, 0)

    ??? diff_1111 = lpart_11 - lpart_11
    ??? print lpart_11
    [(0, 0, 0, 1), (0, 0, 2, 0), (0, 0, 2, 2)]
    ??? print diff_1111.listing()
    <empty line partition>

    ??? diff_1112 = lpart_11 - lpart_12
    ??? print lpart_11
    [(0, 0, 0, 1), (0, 0, 2, 0), (0, 0, 2, 2)]
    ??? print diff_1112.listing()
    (45, 0):
        (0, 0, 1, 1)
    (90, 0):
        (0, 0, 2, 0)

    ??? diff_1211 = lpart_12 - lpart_11
    ??? print lpart_11
    [(0, 0, 0, 1), (0, 0, 2, 0), (0, 0, 2, 2)]
    ??? print lpart_11.listing()                                                #   lpart_11.listing() has changed
    (0, 0):
        (0, 0, 0, 1)
    (45, 0):
        (0, 0, 2, 2)
    (90, 0):
        (0, 0, 2, 0)
    ??? print diff_1211.listing()
    (45, 0):
        (2, 2, 3, 3)
    (90, 0):
        (3, 0, 4, 0)

    ??? diff_1102 = lpart_11 - lpart_02
    ??? print diff_1102
    [(0, 0, 0, 1), (0, 0, 2, 0), (0, 0, 2, 2)]
    
    ??? diff_1212 = lpart_12 - lpart_12
    ??? print diff_1212.listing()
    <empty line partition>

#   reduce()
    ??? def make_line_parts_for_reduce():
    ...      = colineation.Colineation.new_empty()
    ...     line_00_01 = line.Line.from_spec(0, 0, 0, 1)
    ...     line_00_10 = line.Line.from_spec(0, 0, 1, 0)
    ...     def make_line_part_0():
    ...         line_part_0 = line_partition.LinePartition.new_empty()
    ...         line_part_0.dictionary[(0, 0)] = colineation_empty
    ...         return line_part_0
    ...     def make_line_part_1():
    ...         line_part_1 = line_partition.LinePartition([line_00_01])
    ...         return line_part_1
    ...     def make_line_part_00():
    ...         line_part_00 = line_partition.LinePartition.new_empty()
    ...         line_part_00.dictionary[(0, 0)] = colineation_empty
    ...         line_part_00.dictionary[(90, 0)] = colineation_empty
    ...         return line_part_00
    ...     def make_line_part_01():
    ...         line_part_01 = line_partition.LinePartition([line_00_10])
    ...         line_part_01.dictionary[(0, 0)] = colineation_empty
    ...         return line_part_01
    ...     def make_line_part_10():
    ...         line_part_10 = line_partition.LinePartition([line_00_01])
    ...         line_part_10.dictionary[(90, 0)] = colineation_empty
    ...         return line_part_10
    ...     def make_line_part_11():
    ...         line_part_11 = line_partition.LinePartition([line_00_10, line_00_01])
    ...         return line_part_11
    ...     line_part_empty = line_partition.LinePartition.new_empty()
    ...     line_part_0 = make_line_part_0()
    ...     line_part_1 = make_line_part_1()
    ...     line_part_00 = make_line_part_00()
    ...     line_part_01 = make_line_part_01()
    ...     line_part_10 = make_line_part_10()
    ...     line_part_11 = make_line_part_11()
    ...     return [line_part_empty, line_part_0, line_part_1, line_part_00, line_part_01, line_part_10, line_part_11]
    ??? line_part_empty, line_part_0, line_part_1, line_part_00, line_part_01, line_part_10, line_part_11 = make_line_parts_for_reduce()
    ??? def test_reduce(line_part):
    ...     line_part.reduce()
    ...     print line_part.listing()

    ??? test_reduce(line_part_empty)
    <empty line partition>
    ??? test_reduce(line_part_0)
    <empty line partition>
    ??? test_reduce(line_part_1)
    (0, 0):
        (0, 0, 0, 1)
    ??? test_reduce(line_part_00)
    <empty line partition>
    ??? test_reduce(line_part_01)
    (90, 0):
        (0, 0, 1, 0)
    ??? test_reduce(line_part_10)
    (0, 0):
        (0, 0, 0, 1)
    ??? test_reduce(line_part_11)
    (0, 0):
        (0, 0, 0, 1)
    (90, 0):
        (0, 0, 1, 0)

### other
#   _print_error_message()
    ??? test_method_name = 'test_method()'
    ??? test_message = 'This is a test'
    ??? line_partition.LinePartition._print_error_message(test_method_name, test_message)
    LinePartition.test_method(): This is a test
