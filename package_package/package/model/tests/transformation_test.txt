>>> import transformation as tf
>>> import math
>>> import numpy as np
>>> import point
>>> from numpy import linalg as la
>>> import vector

>>> almost_equal = np.allclose
>>> TAU = math.pi * 2

>>> p00 = point.Point( 0,  0, 0)
>>> p10 = point.Point(-3,  8, 0)
>>> p11 = point.Point(-6,  4, 0)
>>> p12 = point.Point(-3,  4, 0)
>>> p20 = point.Point(12, 14, 0)
>>> p21 = point.Point( 4,  8, 0)
>>> p22 = point.Point( 4, 14, 0)
>>> tri1 = [p10, p11, p12]
>>> tri2 = [p20, p21, p22]

>>> v1_man = vector.Vector(  3,  -8, 0)
>>> v2_man = vector.Vector(-12, -14, 0)

>>> v1110 = p11 - p10
>>> cos_b1110 = math.cos(v1110.bearing)
>>> sin_b1110 = math.sin(v1110.bearing)
>>> r1_man = np.array([
...     [cos_b1110, -sin_b1110, 0],
...     [sin_b1110,  cos_b1110, 0],
...     [        0,          0, 1]])
>>> v2120 = p21 - p20
>>> cos_b2120 = math.cos(v2120.bearing)
>>> sin_b2120 = math.sin(v2120.bearing)
>>> r2_man = np.array([
...     [cos_b2120, -sin_b2120, 0],
...     [sin_b2120,  cos_b2120, 0],
...     [        0,          0, 1]])
>>> r2i_man = la.inv(r2_man)
>>> r21_man = r2_man - r1_man
>>> s_man = np.array([
...     [2., 0., 0.],
...     [0., 2., 0.],
...     [0., 0., 2.]])
>>> f_man = np.array([
...     [-1, 0, 0],
...     [ 0, 1, 0],
...     [ 0, 0, 1]])
>>> v2i_man = vector.Vector(12, 14, 0)

>>> v1 = tf.Transformation.make_v(tri1, p00)
>>> v1 == v1_man
True
>>> v2 = tf.Transformation.make_v(tri2, p00)
>>> v2 == v2_man
True

>>> r1 = tf.Transformation.make_r(tri1)
>>> r1 == r1_man
array([[ True,  True,  True],
       [ True,  True,  True],
       [ True,  True,  True]], dtype=bool)
>>> r2 = tf.Transformation.make_r(tri2)
>>> r2 == r2_man
array([[ True,  True,  True],
       [ True,  True,  True],
       [ True,  True,  True]], dtype=bool)
>>> r2i = la.inv(r2)
>>> r12 = r2 - r1

>>> s = tf.Transformation.make_s(tri1, tri2)
>>> s == s_man
array([[ True,  True,  True],
       [ True,  True,  True],
       [ True,  True,  True]], dtype=bool)

>>> f = tf.Transformation.make_f(tri1, tri2)
>>> f == f_man
array([[ True,  True,  True],
       [ True,  True,  True],
       [ True,  True,  True]], dtype=bool)

>>> v2i = v2 * -1
>>> v2i == v2i_man
True

>>> v1_tri1 = tf.Transformation.translate_tri(v1, tri1)
>>> p1 = point.Point(-3, -4, 0)
>>> p2 = point.Point( 0, -4, 0)
>>> v1_tri1_man = [p00, p1, p2]
>>> print(v1_tri1)
[(0, 0, 0), (-3, -4, 0), (0, -4, 0)]
>>> print(v1_tri1_man)
[(0, 0, 0), (-3, -4, 0), (0, -4, 0)]
>>> v1_tri1 == v1_tri1_man
True

>>> v2_tri2 = tf.Transformation.translate_tri(v2, tri2)
>>> p1 = point.Point(-8, -6, 0)
>>> p2 = point.Point(-8,  0, 0)
>>> v2_tri2_man = [p00, p1, p2]
>>> print(v2_tri2)
[(0, 0, 0), (-8, -6, 0), (-8, 0, 0)]
>>> print(v2_tri2_man)
[(0, 0, 0), (-8, -6, 0), (-8, 0, 0)]
>>> v2_tri2 == v2_tri2_man
True

>>> r1v1_tri1 = tf.Transformation.transform_tri(r1, v1_tri1)

>>> p1 = point.Point( 0  , 5  , 0)
>>> p2 = point.Point(-2.4, 3.2, 0)
>>> r1v1_tri1_man = [p00, p1, p2]

??? print(r1v1_tri1)
[(0.0, 0.0, 0.0), (0.0, 5.0, 0.0), (-2.4, 3.2, 0.0)]
??? print(r1v1_tri1_man)
[(0.0, 0.0, 0.0), (0.0, 5.0, 0.0), (-2.4, 3.2, 0.0)]
>>> r1v1_tri1 == r1v1_tri1_man
True

>>> sr1v1_tri1 = tf.Transformation.transform_tri(s, r1v1_tri1)
>>> p1 = point.Point( 0.0, 10.0, 0.0)
>>> p2 = point.Point(-4.8,  6.4, 0.0)
>>> sr1v1_tri1_man = [p00, p1, p2]

??? print(sr1v1_tri1)
??? print(sr1v1_tri1_man)
>>> sr1v1_tri1 == sr1v1_tri1_man
True

>>> fsr1v1_tri1 = tf.Transformation.transform_tri(f, sr1v1_tri1)
>>> p1 = point.Point(0.0, 10.0, 0.0)
>>> p2 = point.Point(4.8,  6.4, 0.0)
>>> fsr1v1_tri1_man = [p00, p1, p2]
>>> fsr1v1_tri1 == fsr1v1_tri1_man
True

>>> r2ifsr1v1_tri1 = tf.Transformation.transform_tri(r2i, fsr1v1_tri1)
>>> p1 = point.Point(-8, -6, 0)
>>> p2 = point.Point(-8,  0, 0)
>>> r2ifsr1v1_tri1_man = [p00, p1, p2]

??? print(r2ifsr1v1_tri1)
??? print(r2ifsr1v1_tri1_man)
>>> r2ifsr1v1_tri1 == r2ifsr1v1_tri1_man
True
































