    >>> import math
    >>> import numpy as np
    >>> from numpy import linalg as la
    >>> import vector

### construct
#   __init__
    >>> a = 'a'
    >>> x = 3
    >>> y = 4
    >>> z = 5

    ### bad type
    >>> vector_from_bad_type = vector.Vector(a, y, z)
    Vector.__init__:
        The arguments must be numbers
    >>> vector_from_bad_type = vector.Vector(x, a, z)
    Vector.__init__:
        The arguments must be numbers
    >>> vector_from_bad_type = vector.Vector(x, y, a)
    Vector.__init__:
        The arguments must be numbers

    ### good value 2d
    >>> v2d = vector.Vector(x, y)
    >>> v2d_matrix = np.array([[3], [4], [0], [0]])     ##  3 elements!
    >>> v2d.matrix == v2d_matrix
    array([[ True],
           [ True],
           [ True],
           [ True]], dtype=bool)
    >>> v2d.length == 5
    True

    ### good value 3d
    >>> vector_3d = vector.Vector(x, 0, y)
    >>> vector_3d_matrix = np.array([[3], [0], [4], [0]])
    >>> vector_3d.matrix == vector_3d_matrix
    array([[ True],
           [ True],
           [ True],
           [ True]], dtype=bool)
    >>> vector_3d.length == 5
    True

#   _find_bearing: practise                     ##  2016-03-05 18:10
    >>> k_866 = 0.8660254037844387
    >>> k_707 = 0.7071067811865476

    ### Given angle (positive clockwise from north, find direction vector
    ###   0 deg -> ( 0    ,  1    )
    ###  30 deg -> ( 0.5  ,  k_866)
    ###  45 deg -> ( k_707,  k_707)
    ###  60 deg -> ( k_866,  0.5  )
    ###  90 deg -> ( 1    ,  0    )
    ### 120 deg -> ( k_866, -0.5  )
    ### 135 deg -> ( k_707, -k_707)
    ### 150 deg -> ( 0.5  , -k_866)
    ### 180 deg -> ( 0    , -1    )
    ### 210 deg -> (-0.5  , -k_866)
    ### 225 deg -> (-k_707, -k_707)
    ### 240 deg -> (-k_866, -0.5  )
    ### 270 deg -> (-1    ,  0    )
    ### 300 deg -> (-k_866,  0.5  )
    ### 315 deg -> (-k_707,  k_707)
    ### 330 deg -> (-0.5  ,  k_866)

    >>> north_dir_mx = np.array([[0], [1], [0]])
    >>> def t(angle):
    ...     t = np.array(
    ...         [   [   math.cos(math.radians(angle)),
    ...                 math.sin(math.radians(angle)), 
    ...                 0],
    ...             [   math.sin(math.radians(angle)),
    ...                 math.cos(math.radians(angle)),
    ...                 0],
    ...             [   0,
    ...                 0,
    ...                 0]])
    ...     return t
    >>> np.cross(t(0), north_dir_mx)
    array[[0]
          [1]
          [0]]

#   _find_bearing
    >>> v = vector.Vector(1, 1)
    >>> val_45 = math.cos(math.radians(45))
    >>> print(val_45)
    0.707106781187

    >>> dir_mx_0 = np.array([[0], [1], [0]])
    >>> v._find_bearing(dir_mx_0)
    0.0

    >>> dir_mx_45 = np.array([[val_45], [val_45], [0]])
    >>> v._find_bearing(dir_mx_45)
    45.0

    >>> dir_mx_90 = np.array([[1], [0], [0]])
    >>> v._find_bearing(dir_mx_90)
    90.0

    >>> dir_mx_135 = np.array([[val_45], [-val_45], [0]])
    >>> v._find_bearing(dir_mx_135)
    135.0 # 45.0

    >>> dir_mx_180 = np.array([[0], [-1], [0]])
    >>> v._find_bearing(dir_mx_180)
    180.0 # 0.0

    >>> dir_mx_225 = np.array([[-val_45], [-val_45], [0]])
    >>> v._find_bearing(dir_mx_225)
    225.0 # 45.0

    >>> dir_mx_270 = np.array([[-1], [0], [0]])
    >>> v._find_bearing(dir_mx_270)
    270.0 # 90.0

    >>> dir_mx_315 = np.array([[-val_45], [val_45], [0]])
    >>> v._find_bearing(dir_mx_315)
    315.0 # -45.0


#   from_matrix
    >>> non_matrix = 37
    >>> vector_from_non_matrix = vector.Vector.from_matrix(non_matrix)
    Vector.from_matrix:
        The argument must be a matrix

    >>> matrix_bad_shape = np.array([[x], [y], [z]])
    >>> vector_from_matrix_bad_shape = (
    ...     vector.Vector.from_matrix(matrix_bad_shape))
    Vector.from_matrix:
        The matrix must have shape (4, 1) and the final element must be array([0])

    >>> matrix_bad_last_element = np.array([[x], [y], [z], [1]])
    >>> vector_from_matrix_bad_last_element = (
    ...     vector.Vector.from_matrix(matrix_bad_last_element))
    Vector.from_matrix:
        The matrix must have shape (4, 1) and the final element must be array([0])

    >>> good_matrix = np.array([[x], [y], [z], [0]])
    >>> vector_from_good_matrix = vector.Vector.from_matrix(good_matrix)
    >>> type(vector_from_good_matrix) == vector.Vector
    True
    >>> print(vector_from_good_matrix)
    [[3]
     [4]
     [5]
     [0]]

    ??? non_vector_matrix = np.array([[x], [y], [z]])

    ??? matrix = np.array([[x], [y], [z], [0]])
    ??? vector_from_matrix = vector.Vector(matrix)
    ??? vector_from_matrix
    array([[3],
           [4],
           [5], 
           [0], dtype=int])


### represent
    ??? matrix

### operations

### relations

### other