    >>> import colineation
    >>> import line
    >>> import math
    >>> import point
    >>> import vector

    >>> cos, sin = math.cos, math.sin
    >>> TAU = math.pi * 2

    ??? drone_line = line.Line.from_spec_4(0, 0, 10, 10)
    
### construct
#   __init__
    >>> def set_up_init():
    ...     p0 = point.Point(0, 0, 0)
    ...     p00 = point.Point(0, 0, 0)
    ...     p1 = point.Point(1, 1, 1)
    ...     return (p0, p00, p1)
    >>> p0, p00, p1 = set_up_init()
    >>> line_bad_type = line.Line(p1, 7)
    Line.__init__:
        The arguments must both be points
    >>> line_bad_value = line.Line(p0, p00)
    Line.__init__:
        The points must be different
    >>> l01 = line.Line(p0, p1)
    >>> l01.x1 == 0
    True
    >>> l01.y1 == 0
    True
    >>> l01.z1 == 0
    True
    >>> l01.x2 == 1
    True
    >>> l01.y2 == 1
    True
    >>> l01.z2 == 1
    True
    >>> l01.spec
    (0, 0, 0, 1, 1, 1)
    >>> l01.v.x == 1
    True
    >>> l01.v.y == 1
    True
    >>> l01.v.z == 1
    True
    >>> uv, p0 = l01.carrier
    >>> uv == vector.Vector(0.57735027, 0.57735027, 0.57735027)
    True
    >>> p0 == p00
    True
    >>> l01.length
    1.7320508075688772

#   _find_carrier
    ### Case 1. Parallel to z-axis: xy-intercept
    >>> def set_up_find_carrier_parallel_to_z_axis():
    ...     tail = point.Point(2, 4, 2)
    ...     head = point.Point(2, 4, 6)
    ...     unit_vector_got, intercept_got = (
    ...         line.Line._find_carrier(tail, head))
    ...     unit_vector_exp = vector.Vector(0, 0, 1)
    ...     intercept_exp = point.Point(2, 4, 0)
    ...     return (
    ...         unit_vector_got, intercept_got,
    ...         unit_vector_exp, intercept_exp)
    >>> uv_got, int_got, uv_exp, int_exp = (
    ...     set_up_find_carrier_parallel_to_z_axis())
    >>> uv_got == uv_exp
    True
    >>> int_got == int_exp
    True
    
    ### Case 2. Parallel to yz-plane: xz-intercept
    >>> def set_up_find_carrier_parallel_to_y_axis():
    ...     tail = point.Point(2, 1, 2)
    ...     head = point.Point(2, 2, 2)
    ...     unit_vector_got, intercept_got = (
    ...         line.Line._find_carrier(tail, head))
    ...     unit_vector_exp = vector.Vector(0, 1, 0)
    ...     intercept_exp = point.Point(2, 0, 2)
    ...     return (
    ...         unit_vector_got, intercept_got,
    ...         unit_vector_exp, intercept_exp)
    >>> uv_got, int_got, uv_exp, int_exp = (
    ...     set_up_find_carrier_parallel_to_y_axis())
    >>> uv_got == uv_exp
    True
    >>> int_got == int_exp
    True

    >>> def set_up_find_carrier_parallel_to_yz_plane_1():
    ...     tail = point.Point(2, 2, 2)
    ...     head = point.Point(2, 6, 6)
    ...     unit_vector_got, intercept_got = (
    ...         line.Line._find_carrier(tail, head))
    ...     a45 = TAU / 8
    ...     cos45 = cos(a45)
    ...     sin45 = sin(a45)
    ...     unit_vector_exp = vector.Vector(0, cos45, sin45)
    ...     intercept_exp = point.Point(2, 0, 0)
    ...     return (
    ...         unit_vector_got, intercept_got,
    ...         unit_vector_exp, intercept_exp)
    >>> uv_got, int_got, uv_exp, int_exp = (
    ...     set_up_find_carrier_parallel_to_yz_plane_1())
    >>> uv_got == uv_exp
    True
    >>> int_got == int_exp
    True

    >>> def set_up_find_carrier_parallel_to_yz_plane_2():
    ...     tail = point.Point(2, 4, 4)
    ...     head = point.Point(2, 8, 7)
    ...     unit_vector_got, intercept_got = (
    ...         line.Line._find_carrier(tail, head))
    ...     unit_vector_exp = vector.Vector(0, 0.8, 0.6)
    ...     intercept_exp = point.Point(2, 0, 1)
    ...     return (
    ...         unit_vector_got, intercept_got,
    ...         unit_vector_exp, intercept_exp)
    >>> uv_got, int_got, uv_exp, int_exp = (
    ...     set_up_find_carrier_parallel_to_yz_plane_2())
    >>> uv_got == uv_exp
    True
    >>> int_got == int_exp
    True
    
    ### Case 3. Other: yz-intercept
    >>> def set_up_find_carrier_other_parallel_to_x_axis():
    ...     tail = point.Point(2, 2, 2)
    ...     head = point.Point(4, 2, 2)
    ...     unit_vector_got, intercept_got = (
    ...         line.Line._find_carrier(tail, head))
    ...     unit_vector_exp = vector.Vector(1, 0, 0)
    ...     intercept_exp = point.Point(0, 2, 2)
    ...     return (
    ...         unit_vector_got, intercept_got,
    ...         unit_vector_exp, intercept_exp)
    >>> uv_got, int_got, uv_exp, int_exp = (
    ...     set_up_find_carrier_other_parallel_to_x_axis())
    >>> uv_got == uv_exp
    True
    >>> int_got == int_exp
    True

    >>> def set_up_find_carrier_other_parallel_to_xy_plane():
    ...     tail = point.Point(2, 2, 2)
    ...     head = point.Point(4, 4, 2)
    ...     unit_vector_got, intercept_got = (
    ...         line.Line._find_carrier(tail, head))
    ...     cos45 = cos(TAU / 8)
    ...     sin45 = sin(TAU / 8)
    ...     unit_vector_exp = vector.Vector(cos45, sin45, 0)
    ...     intercept_exp = point.Point(0, 0, 2)
    ...     return (
    ...         unit_vector_got, intercept_got,
    ...         unit_vector_exp, intercept_exp)
    >>> uv_got, int_got, uv_exp, int_exp = (
    ...     set_up_find_carrier_other_parallel_to_xy_plane())
    >>> uv_got == uv_exp
    True
    >>> int_got == int_exp
    True

    >>> def set_up_find_carrier_other():
    ...     tail = point.Point(2, 2, 2)
    ...     head = point.Point(6, 2, 6)
    ...     unit_vector_got, intercept_got = (
    ...         line.Line._find_carrier(tail, head))
    ...     a45 = TAU / 8
    ...     cos45 = cos(a45)
    ...     sin45 = sin(a45)
    ...     unit_vector_exp = vector.Vector(cos45, 0, sin45)
    ...     intercept_exp = point.Point(0, 2, 0)
    ...     return (
    ...         unit_vector_got, intercept_got,
    ...         unit_vector_exp, intercept_exp)
    >>> uv_got, int_got, uv_exp, int_exp = set_up_find_carrier_other()
    >>> uv_got == uv_exp
    True
    >>> int_got == int_exp
    True

#   _find_xz_intercept
    >>> def set_up_find_xz_intercept_parallel_to_y_axis():
    ...     v = vector.Vector(0, 1, 0)
    ...     p1 = point.Point(2, 2, 2)
    ...     p0_got = line.Line._find_xz_intercept(v, p1)
    ...     po_exp = point.Point(2, 0, 2)
    ...     return (p0_got, po_exp)
    >>> p0_got, p0_exp = set_up_find_xz_intercept_parallel_to_y_axis()
    >>> p0_got == p0_exp
    True

    >>> def set_up_find_xz_intercept_parallel_to_yz_plane():
    ...     v = vector.Vector(0, 0.8, 0.6)
    ...     p1 = point.Point(2, 4, 4)
    ...     p0_got = line.Line._find_xz_intercept(v, p1)
    ...     p0_exp = point.Point(2, 0, 1)
    ...     return (p0_got, p0_exp)
    >>> p0_got, p0_exp = set_up_find_xz_intercept_parallel_to_yz_plane()
    >>> p0_got == p0_exp
    True

#   _find_yz_intercept
    >>> def set_up_find_yz_intercept_parallel_to_x_axis():
    ...     v = vector.Vector(1, 0, 0)
    ...     p1 = point.Point(2, 2, 2)
    ...     p0_got = line.Line._find_yz_intercept(v, p1)
    ...     p0_exp = point.Point(0, 2, 2)
    ...     return (p0_got, p0_exp)
    >>> p0_got, p0_exp = set_up_find_yz_intercept_parallel_to_x_axis()
    >>> p0_got == p0_exp
    True

    >>> def set_up_find_yz_intercept():
    ...     v = vector.Vector(0.33333, 0.33333, 0.33333)
    ...     p1 = point.Point(2, 2, 3)
    ...     p0_got = line.Line._find_yz_intercept(v, p1)
    ...     p0_exp = point.Point(0, 0, 1)
    ...     return (p0_got, p0_exp)
    >>> p0_got, p0_exp = set_up_find_yz_intercept()
    >>> p0_got == p0_exp
    True

#   from_spec_4(x1, y1, x2, y2)
    ??? line_from_identical_points = line.Line.from_spec_4(0, 0, 0, 0)
    Line.__init__:
        The points must be different

    ??? line_from_non_numbers = line.Line.from_spec_4(1, 2, [], 4)
    Line.from_spec_4:
        The arguments must all be numbers

    ??? line_from_spec_4 = line.Line.from_spec_4(0, 0, 1, 1)
    ??? print line_from_spec_4
    ((0, 0, 0), (1, 1, 0))

#   from_spec_2(x1, x2)
    ??? line_from_spec_2 = line.Line.from_spec_2(1, 2)
    ??? print line_from_spec_2
    ((1, 1, 0), (2, 2, 0))

### represent
#   __str__
    >>> str(l01)
    '((0, 0, 0), (1, 1, 1))'

#   __repr__
    >>> r_01 = repr(l01)
    >>> r_01
    'line.Line.from_spec(0, 0, 0, 1, 1, 1)'
    >>> eval(r_01) == l01
    True

#   listing
    >>> l01.listing()
    '((0, 0, 0), (1, 1, 1))'
    >>> l01.listing(0)
    '((0, 0, 0), (1, 1, 1))'
    >>> l01.listing(1)
    '((0.0, 0.0, 0.0), (1.0, 1.0, 1.0))'

### ordering relations
#   __eq__
    >>> line_eq =  line.Line.from_spec_4(4, 4, 6, 6)
    >>> line_eq == line.Line.from_spec_4(5, 5, 6, 6)
    False
    >>> line_eq == line.Line.from_spec_4(4, 4, 5, 5)
    False
    >>> line_eq == line.Line.from_spec_4(4, 4, 6, 6)
    True

#   __ge__
    >>> line_ge  = line.Line.from_spec_4(4, 4, 6, 6)
    >>> line_ge >= line.Line.from_spec_4(3, 3, 5, 5)
    True
    >>> line_ge >= line.Line.from_spec_4(4, 4, 5, 5)
    True
    >>> line_ge >= line.Line.from_spec_4(4, 4, 6, 6)
    True
    >>> line_ge >= line.Line.from_spec_4(4, 4, 7, 7)
    False
    >>> line_ge >= line.Line.from_spec_4(6, 6, 7, 7)
    False

#   __gt__
    >>> line_gt = line.Line.from_spec_4(4, 4, 6, 6)
    >>> line_gt > line.Line.from_spec_4(3, 3, 9, 9)
    True
    >>> line_gt > line.Line.from_spec_4(4, 4, 5, 5)
    True
    >>> line_gt > line.Line.from_spec_4(4, 4, 6, 6)
    False
    >>> line_gt > line.Line.from_spec_4(4, 4, 7, 7)
    False
    >>> line_gt > line.Line.from_spec_4(5, 5, 6, 6)
    False

#   __le__
    >>> line_le  = line.Line.from_spec_4(4, 4, 6, 6)
    >>> line_le <= line.Line.from_spec_4(5, 5, 9, 9)
    True
    >>> line_le <= line.Line.from_spec_4(4, 4, 7, 7)
    True
    >>> line_le <= line.Line.from_spec_4(4, 4, 6, 6)
    True
    >>> line_le <= line.Line.from_spec_4(4, 4, 5, 5)
    False
    >>> line_le <= line.Line.from_spec_4(1, 1, 9, 9)
    False

#   __lt__
    >>> line_lt = line.Line.from_spec_4(4, 4, 6, 6)
    >>> line_lt < line.Line.from_spec_4(5, 5, 6, 6)
    True
    >>> line_lt < line.Line.from_spec_4(4, 4, 7, 7)
    True
    >>> line_lt < line.Line.from_spec_4(4, 4, 6, 6)
    False
    >>> line_lt < line.Line.from_spec_4(4, 4, 5, 5)
    False
    >>> line_lt < line.Line.from_spec_4(1, 1, 7, 7)
    False

#   __ne__
    >>> line_ne  = line.Line.from_spec_4(4, 4, 6, 6)
    >>> line_ne != line.Line.from_spec_4(5, 5, 6, 6)
    True
    >>> line_ne != line.Line.from_spec_4(4, 4, 5, 5)
    True
    >>> line_ne != line.Line.from_spec_4(4, 4, 6, 6)
    False

#   is_collinear_with

### part relations
#   is_a_subline_in_colineation(colineation)    # no more colineation!
    ??? line_control = line.Line.from_spec_4(1, 1, 2, 2)
    ??? line_01 = line.Line.from_spec_4(0, 0, 1, 1)
    ??? line_02 = line.Line.from_spec_4(0, 0, 2, 2)
    ??? line_03 = line.Line.from_spec_4(0, 0, 3, 3)
    ??? line_12 = line.Line.from_spec_4(1, 1, 2, 2)
    ??? line_13 = line.Line.from_spec_4(1, 1, 3, 3)
    ??? line_23 = line.Line.from_spec_4(2, 2, 3, 3)
    ??? line_45 = line.Line.from_spec_4(4, 4, 5, 5)

    ??? colineation_01 = colineation.Colineation([line_01])
    ??? colineation_02 = colineation.Colineation([line_02])
    ??? colineation_03 = colineation.Colineation([line_03])
    ??? colineation_12 = colineation.Colineation([line_12])
    ??? colineation_13 = colineation.Colineation([line_13])
    ??? colineation_23 = colineation.Colineation([line_23])
    ??? colineation_01_23 = colineation.Colineation([line_01, line_23])
    ??? colineation_01_45 = colineation.Colineation([line_01, line_45])
    ??? colineation_02_45 = colineation.Colineation([line_02, line_45])
    ??? colineation_03_45 = colineation.Colineation([line_03, line_45])
    ??? colineation_12_45 = colineation.Colineation([line_12, line_45])
    ??? colineation_13_45 = colineation.Colineation([line_13, line_45])
    ??? colineation_23_45 = colineation.Colineation([line_23, line_45])

    ??? line_control.is_a_subline_in_colineation(colineation_01)
    False
    ??? line_control.is_a_subline_in_colineation(colineation_02)
    True
    ??? line_control.is_a_subline_in_colineation(colineation_03)
    True
    ??? line_control.is_a_subline_in_colineation(colineation_12)
    True
    ??? line_control.is_a_subline_in_colineation(colineation_13)
    True
    ??? line_control.is_a_subline_in_colineation(colineation_23)
    False
    ??? line_control.is_a_subline_in_colineation(colineation_01_23)
    False
    ??? line_control.is_a_subline_in_colineation(colineation_01_45)
    False
    ??? line_control.is_a_subline_in_colineation(colineation_02_45)
    True
    ??? line_control.is_a_subline_in_colineation(colineation_03_45)
    True
    ??? line_control.is_a_subline_in_colineation(colineation_12_45)
    True
    ??? line_control.is_a_subline_in_colineation(colineation_13_45)
    True
    ??? line_control.is_a_subline_in_colineation(colineation_23_45)
    False

#   is_a_subline_of(other)
    ??? line_12 = line.Line.from_spec_4(1, 1, 2, 2)
    
    ??? line_12.is_a_subline_of(line.Line.from_spec_4(0, 0, 1, 1))
    False
    ??? line_12.is_a_subline_of(line.Line.from_spec_4(0, 0, 2, 2))
    True
    ??? line_12.is_a_subline_of(line.Line.from_spec_4(1, 1, 2, 2))
    True

### overlap relations
#   is_disjoint_left_of(other), overlaps_tail_of(other), 
    overlaps_all_of(other), overlaps_middle_of(other), 
    overlaps_head_of(other), is_disjoint_right_of(other)

    ??? this    = line.Line.from_spec_4(2, 2, 5, 5)
    ??? that_01 = line.Line.from_spec_4(0, 0, 1, 1)
    ??? that_02 = line.Line.from_spec_4(0, 0, 2, 2)
    ??? that_03 = line.Line.from_spec_4(0, 0, 3, 3)
    ??? that_05 = line.Line.from_spec_4(0, 0, 5, 5)
    ??? that_07 = line.Line.from_spec_4(0, 0, 7, 7)
    ??? that_23 = line.Line.from_spec_4(2, 2, 3, 3)
    ??? that_25 = line.Line.from_spec_4(2, 2, 5, 5)
    ??? that_27 = line.Line.from_spec_4(2, 2, 7, 7)
    ??? that_34 = line.Line.from_spec_4(3, 3, 4, 4)
    ??? that_35 = line.Line.from_spec_4(3, 3, 5, 5)
    ??? that_37 = line.Line.from_spec_4(3, 3, 7, 7)
    ??? that_57 = line.Line.from_spec_4(5, 5, 7, 7)
    ??? that_67 = line.Line.from_spec_4(6, 6, 7, 7)

    ??? this.is_disjoint_left_of(that_01)
    False
    ??? this.is_disjoint_left_of(that_02)
    False
    ??? this.is_disjoint_left_of(that_03)
    False
    ??? this.is_disjoint_left_of(that_05)
    False
    ??? this.is_disjoint_left_of(that_07)
    False
    ??? this.is_disjoint_left_of(that_23)
    False
    ??? this.is_disjoint_left_of(that_25)
    False
    ??? this.is_disjoint_left_of(that_27)
    False
    ??? this.is_disjoint_left_of(that_34)
    False
    ??? this.is_disjoint_left_of(that_35)
    False
    ??? this.is_disjoint_left_of(that_37)
    False
    ??? this.is_disjoint_left_of(that_57)
    True
    ??? this.is_disjoint_left_of(that_67)
    True

    ??? this.overlaps_tail_of(that_01)
    False
    ??? this.overlaps_tail_of(that_02)
    False
    ??? this.overlaps_tail_of(that_03)
    False
    ??? this.overlaps_tail_of(that_05)
    False
    ??? this.overlaps_tail_of(that_07)
    False
    ??? this.overlaps_tail_of(that_23)
    False
    ??? this.overlaps_tail_of(that_25)
    False
    ??? this.overlaps_tail_of(that_27)
    True
    ??? this.overlaps_tail_of(that_34)
    False
    ??? this.overlaps_tail_of(that_35)
    False
    ??? this.overlaps_tail_of(that_37)
    True
    ??? this.overlaps_tail_of(that_57)
    False
    ??? this.overlaps_tail_of(that_67)
    False

    ??? this.overlaps_all_of(that_01)
    False
    ??? this.overlaps_all_of(that_02)
    False
    ??? this.overlaps_all_of(that_03)
    False
    ??? this.overlaps_all_of(that_05)
    False
    ??? this.overlaps_all_of(that_07)
    False
    ??? this.overlaps_all_of(that_23)
    True
    ??? this.overlaps_all_of(that_25)
    True
    ??? this.overlaps_all_of(that_27)
    False
    ??? this.overlaps_all_of(that_34)
    True
    ??? this.overlaps_all_of(that_35)
    True
    ??? this.overlaps_all_of(that_37)
    False
    ??? this.overlaps_all_of(that_57)
    False
    ??? this.overlaps_all_of(that_67)
    False

    ??? this.overlaps_middle_of(that_01)
    False
    ??? this.overlaps_middle_of(that_02)
    False
    ??? this.overlaps_middle_of(that_03)
    False
    ??? this.overlaps_middle_of(that_05)
    False
    ??? this.overlaps_middle_of(that_07)
    True
    ??? this.overlaps_middle_of(that_23)
    False
    ??? this.overlaps_middle_of(that_25)
    False
    ??? this.overlaps_middle_of(that_27)
    False
    ??? this.overlaps_middle_of(that_34)
    False
    ??? this.overlaps_middle_of(that_35)
    False
    ??? this.overlaps_middle_of(that_37)
    False
    ??? this.overlaps_middle_of(that_57)
    False
    ??? this.overlaps_middle_of(that_67)
    False

    ??? this.overlaps_head_of(that_01)
    False
    ??? this.overlaps_head_of(that_02)
    False
    ??? this.overlaps_head_of(that_03)
    True
    ??? this.overlaps_head_of(that_05)
    True
    ??? this.overlaps_head_of(that_07)
    False
    ??? this.overlaps_head_of(that_23)
    False
    ??? this.overlaps_head_of(that_25)
    False
    ??? this.overlaps_head_of(that_27)
    False
    ??? this.overlaps_head_of(that_34)
    False
    ??? this.overlaps_head_of(that_35)
    False
    ??? this.overlaps_head_of(that_37)
    False
    ??? this.overlaps_head_of(that_57)
    False
    ??? this.overlaps_head_of(that_67)
    False

    ??? this.is_disjoint_right_of(that_01)
    True
    ??? this.is_disjoint_right_of(that_02)
    True
    ??? this.is_disjoint_right_of(that_03)
    False
    ??? this.is_disjoint_right_of(that_05)
    False
    ??? this.is_disjoint_right_of(that_07)
    False
    ??? this.is_disjoint_right_of(that_23)
    False
    ??? this.is_disjoint_right_of(that_25)
    False
    ??? this.is_disjoint_right_of(that_27)
    False
    ??? this.is_disjoint_right_of(that_34)
    False
    ??? this.is_disjoint_right_of(that_35)
    False
    ??? this.is_disjoint_right_of(that_37)
    False
    ??? this.is_disjoint_right_of(that_57)
    False
    ??? this.is_disjoint_right_of(that_67)
    False

### add
#   can_be_merged_with(other)
#   test for non-collinear lines
    ??? line_0001 = line.Line.from_spec_4(0, 0, 0, 1)
    ??? line_26 = line.Line.from_spec_2(2, 6) #     ====
    ??? line_01 = line.Line.from_spec_2(0, 1) #   -
    ??? line_02 = line.Line.from_spec_2(0, 2) #   --
    ??? line_13 = line.Line.from_spec_2(1, 3) #    --
    ??? line_17 = line.Line.from_spec_2(1, 7) #    ------
    ??? line_24 = line.Line.from_spec_2(2, 4) #     --
    
                                                       #     ====
    
    ??? line_35 = line.Line.from_spec_2(3, 5) #      --
    ??? line_46 = line.Line.from_spec_2(4, 6) #       --
    ??? line_57 = line.Line.from_spec_2(5, 7) #        --
    ??? line_68 = line.Line.from_spec_2(6, 8) #         --
    ??? line_78 = line.Line.from_spec_2(7, 8) #          -
    
                                                       #     ====

    ??? line_26.can_be_merged_with(line_0001)
    You're trying to test non-collinear lines
    ??? line_26.can_be_merged_with(line_02)
    True
    ??? line_26.can_be_merged_with(line_68)
    True
    ??? line_26.can_be_merged_with(line_13)
    True
    ??? line_26.can_be_merged_with(line_57)
    True
    ??? line_26.can_be_merged_with(line_24)
    True
    ??? line_26.can_be_merged_with(line_46)
    True
    ??? line_26.can_be_merged_with(line_35)
    True
    ??? line_26.can_be_merged_with(line_17)
    True
    ??? line_26.can_be_merged_with(line_01)
    False
    ??? line_26.can_be_merged_with(line_78)
    False

#   merge(other)
    ??? line_k  = line.Line.from_spec_2(0, 6) #   ======
    ??? line_03 = line.Line.from_spec_2(0, 3) #   ---
    ??? line_06 = line.Line.from_spec_2(0, 6) #   ------
    ??? line_08 = line.Line.from_spec_2(0, 8) #   --------
    ??? line_34 = line.Line.from_spec_2(3, 4) #      -
    ??? line_36 = line.Line.from_spec_2(3, 6) #      ---
    ??? line_38 = line.Line.from_spec_2(3, 8) #      -----
    ??? line_68 = line.Line.from_spec_2(6, 8) #         --
    
    ??? print line_k.merge(line_03)
    ((0, 0, 0), (6, 6, 0))
    ??? print line_k.merge(line_06)
    ((0, 0, 0), (6, 6, 0))
    ??? print line_k.merge(line_08)
    ((0, 0, 0), (8, 8, 0))
    ??? print line_k.merge(line_34)
    ((0, 0, 0), (6, 6, 0))
    ??? print line_k.merge(line_36)
    ((0, 0, 0), (6, 6, 0))
    ??? print line_k.merge(line_38)
    ((0, 0, 0), (8, 8, 0))
    ??? print line_k.merge(line_68)
    ((0, 0, 0), (8, 8, 0))

### subtract
#   subtract_line_tail(line)
    ??? minuend      = line.Line.from_spec_4(2, 2, 5, 5)
    ??? subtrahend_1 = line.Line.from_spec_4(1, 1, 3, 3)
    ??? subtrahend_2 = line.Line.from_spec_4(1, 1, 2, 2)
    
    ??? differences_1 = minuend.subtract_line_tail(subtrahend_1)
    ??? for a_line in differences_1:
    ...     print a_line
    ((3, 3, 0), (5, 5, 0))
    ??? differences_2 = minuend.subtract_line_tail(subtrahend_2)
    The subtrahend does not overlap the tail of the minuend

#   subtract_line_middle(other)
    ??? minuend = line.Line.from_spec_4(2, 2, 5, 5)
    ??? subtrahend = line.Line.from_spec_4(3, 3, 4, 4)
    
    ??? line_differences = minuend.subtract_line_middle(subtrahend)
    ??? for difference in line_differences:
    ...     print difference
    ((2, 2, 0), (3, 3, 0))
    ((4, 4, 0), (5, 5, 0))

#   subtract_line_head(other)
    ??? minuend = line.Line.from_spec_4(2, 2, 5, 5)
    ??? subtrahend = line.Line.from_spec_4(4, 4, 6, 6)
    ??? line_differences = minuend.subtract_line_head(subtrahend)
    ??? for a_line in line_differences:
    ...     print a_line
    ((2, 2, 0), (4, 4, 0))

    