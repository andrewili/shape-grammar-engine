    >>> import math
    >>> import numpy as np
    >>> import point
    >>> import vector
    >>> almost_equal = np.allclose
    >>> TAU = math.pi * 2

### construct
#   __init__
    >>> p000 = point.Point(0, 0, 0)
    >>> x = 2
    >>> y = 3
    >>> z = 4

    ### bad type
    >>> p = point.Point('x', 0, 0)
    Point.__init__:
        The arguments must all be numbers
    >>> p = point.Point(1, 2, 3)

    ### good arg
    >>> good_arg_xy = point.Point(1, 2)
    >>> good_arg_xy.x == 1
    True
    >>> good_arg_xy.y == 2
    True
    >>> good_arg_xy.z == 0
    True
    >>> good_arg_xy.matrix == np.array([1, 2, 0])
    array([ True,  True,  True], dtype=bool)

    >>> good_arg_xyz = point.Point(1, 2, 3)
    >>> good_arg_xyz.x == 1
    True
    >>> good_arg_xyz.y == 2
    True
    >>> good_arg_xyz.z == 3
    True
    >>> good_arg_xyz.matrix == np.array([1, 2, 3])
    array([ True,  True,  True], dtype=bool)
    
    >>> good_arg_xyz_float = point.Point(1.1, 2.2, 3.3)
    >>> good_arg_xyz_float.x == 1.1
    True
    >>> good_arg_xyz_float.y == 2.2
    True
    >>> good_arg_xyz_float.z == 3.3
    True
    >>> good_arg_xyz_float.matrix == np.array([1.1, 2.2, 3.3])
    array([ True,  True,  True], dtype=bool)

#   _is_a_number
    >>> p000._is_a_number('a')
    False
    >>> p000._is_a_number([1])
    False
    >>> p000._is_a_number(1)
    True
    >>> p000._is_a_number(1.1)
    True

#   from_spec
    ### bad type
    >>> non_tuple = 1
    >>> point.Point.from_spec(non_tuple)
    Point.from_spec:
        The argument must be a tuple or a list of 2 or 3 numbers
    >>> tuple_with_1_bad_type = ('x', 2, 3)
    >>> point.Point.from_spec(tuple_with_1_bad_type)
    Point.from_spec:
        The argument must be a tuple or a list of 2 or 3 numbers

    ### bad value
    >>> bad_val_1_el = [1]
    >>> bad_val_4_el = (1, 2, 3, 4)
    >>> point.Point.from_spec(bad_val_1_el)
    Point.from_spec:
        The argument must be a tuple or a list of 2 or 3 numbers
    >>> point.Point.from_spec(bad_val_4_el)
    Point.from_spec:
        The argument must be a tuple or a list of 2 or 3 numbers

    ### good arg
    >>> good_arg_2 = (2.2, 1.1)
    >>> p = point.Point.from_spec(good_arg_2)
    >>> p.matrix == np.array([2.2, 1.1, 0])
    array([ True,  True,  True], dtype=bool)

    >>> good_arg_3 = [3.3, 2.2, 1.1]
    >>> p = point.Point.from_spec(good_arg_3)
    >>> p.matrix == np.array([3.3, 2.2, 1.1])
    array([ True,  True,  True], dtype=bool)

#   is_a_spec
    >>> bad_type_container = 7
    >>> point.Point.from_spec(bad_type_container)
    Point.from_spec:
        The argument must be a tuple or a list of 2 or 3 numbers

    >>> bad_type_length_short = [1.1]
    >>> point.Point.from_spec(bad_type_length_short)
    Point.from_spec:
        The argument must be a tuple or a list of 2 or 3 numbers

    >>> bad_type_length_long = [1.1, 2.2, 3.3, 4.4]
    >>> point.Point.from_spec(bad_type_length_long)
    Point.from_spec:
        The argument must be a tuple or a list of 2 or 3 numbers

    >>> bad_type_element = ['x', 2.2, 3.3]
    >>> point.Point.from_spec(bad_type_element)
    Point.from_spec:
        The argument must be a tuple or a list of 2 or 3 numbers

    >>> good_arg_2 = (1.1, 2.2)
    >>> point.Point.is_a_spec(good_arg_2)
    True
    >>> good_arg_3 = [1.1, 2.2, 3.3]
    >>> point.Point.is_a_spec(good_arg_3)
    True

#   from_matrix
    ### bad type
    >>> matrix_bad_type = 17
    >>> p = point.Point.from_matrix(matrix_bad_type)
    Point.from_matrix:
        The argument must be a matrix of numbers

    ### bad value
    >>> matrix_bad_value = np.array([1, 2, 3, 4])
    >>> p = point.Point.from_matrix(matrix_bad_value)
    Point.from_matrix:
        The matrix must have shape (3, )

    ### good arg
    >>> good_arg = np.array([3.3, 2.2, 1.1])
    >>> p = point.Point.from_matrix(good_arg)
    >>> print(p)
    (3.3, 2.2, 1.1)
    >>> p.matrix == good_arg
    array([ True,  True,  True], dtype=bool)

### represent
    >>> p234 = point.Point(2, 3, 4)
    >>> p123456 = point.Point(1.2, 3.4, 5.6)

#   __str__
    >>> str(p234)
    '(2, 3, 4)'
    >>> str(p123456)
    '(1.2, 3.4, 5.6)'

#   __repr__
    >>> repr(p234)
    '(2, 3, 4)'
    >>> repr(p123456)
    '(1.2, 3.4, 5.6)'

#   listing
    >>> print p234.listing()
    (2, 3, 4)
    >>> print p234.listing(1)
    (2.0, 3.0, 4.0)
    >>> print p234.listing(2.1)
    Point.listing:
        The argument must be an integer
    None
    >>> print p234.listing(-1.3)
    Point.listing:
        The argument must be an integer
    None
    >>> print p234.listing(-1)
    Point.listing:
        The argument must be non-negative
    None

#   get_formatted_coord
    >>> print p234.get_formatted_coord(25)
    Point.get_formatted_coord:
        The dimension must be a string ('x', 'y', or 'z')
    None
    >>> print p234.get_formatted_coord('p')
    Point.get_formatted_coord:
        The dimension must be either 'x', 'y', or 'z'
    None
    >>> print p234.get_formatted_coord('x')
    2
    >>> print p234.get_formatted_coord('x', 1)
    2.0
    >>> print p234.get_formatted_coord('x', 1.2)
    2.0
    >>> print p234.get_formatted_coord('x', -2)
    2
    >>> print p234.get_formatted_coord('x', -2.3)
    2
    >>> print p234.get_formatted_coord('y')
    3

### operations
#   __add__
    >>> p1 = point.Point(1, 2, 3)
    >>> v = vector.Vector(2, 2, 2)
    >>> p2 = p1 + v
    >>> p2.matrix == np.array([3, 4, 5])
    array([ True,  True,  True], dtype=bool)

#   __sub__
    >>> p123 = point.Point(1, 2, 3)
    >>> p234 = point.Point(2, 3, 4)
    >>> non_point = 37

    >>> p123 - non_point
    Point.__sub__:
        The argument must be a Point object
    >>> v111 = p234 - p123
    >>> v111.matrix == np.array([1, 1, 1])
    array([ True,  True,  True], dtype=bool)
    >>> v_111 = p123 - p234
    >>> v_111.matrix == np.array([-1, -1, -1])
    array([ True,  True,  True], dtype=bool)
    >>> v000 = p123 - p123
    >>> v000.matrix == np.array([0, 0, 0])
    array([ True,  True,  True], dtype=bool)

### relations
    >>> cos45 = math.cos(TAU/8) # 0.7071067811865476
    >>> sin45 = math.sin(TAU/8) # 0.7071067811865475
    >>> o0707 =                   0.707
    >>> cos45 > sin45
    True
    >>> cos45 > o0707
    True
    >>> almost_equal(cos45, o0707)
    False

#   __eq__
    >>> point_eq =  point.Point(cos45, cos45, 0)
    >>> point_eq == point.Point(cos45, sin45, 0)
    True
    >>> point_eq == point.Point(sin45, cos45, 0)
    True
    >>> point_eq == point.Point(cos45, o0707, 0)
    False

#   __ge__
    >>> point_ge  = point.Point(sin45, sin45, 0)
    >>> point_ge >= point.Point(sin45, cos45, 0)
    True
    >>> point_ge >= point.Point(sin45, o0707, 0)
    True

#   __gt__
    >>> point_gt = point.Point(cos45, cos45, 0)
    >>> point_gt > point.Point(cos45, o0707, 0)
    True
    >>> point_gt > point.Point(cos45, sin45, 0)
    False

#   __le__
    >>> point_le  = point.Point(sin45, o0707, 0)
    >>> point_le <= point.Point(sin45, sin45, 0)
    True
    >>> point_le <= point.Point(cos45, o0707, 0)
    True

#   __lt__
    >>> point_lt = point.Point(sin45, o0707, 0)
    >>> point_lt < point.Point(sin45, sin45, 0)
    True
    >>> point_lt < point.Point(sin45, cos45, 0)
    True

#   __ne__
    >>> point_ne  = point.Point(cos45, cos45, 0)
    >>> point_ne != point.Point(cos45, o0707, 0)
    True
    >>> point_ne != point.Point(cos45, sin45, 0)
    False































