    >>> import point

### construct
#   __init__
    >>> x = 2
    >>> y = 3
    >>> z = 4

    ### bad type iter
    >>> point_from_bad_type_iter = point.Point('xyz')
    Point.__init__:
        The argument must be a 2- or 3-tuple of numbers

    ### bad type element
    >>> point_from_bad_type_element = point.Point(('x', y, z))
    Point.__init__:
        The argument must be a 2- or 3-tuple of numbers
    
    ### bad value one element
    >>> point_from_bad_value_one_element = point.Point((1))
    Point.__init__:
        The argument must be a 2- or 3-tuple of numbers

    ### bad value four elements
    >>> point_from_bad_value_one_element = point.Point((1, 2, 3, 4))
    Point.__init__:
        The argument must be a 2- or 3-tuple of numbers

    ### good type xy
    >>> point_from_good_type_xy = point.Point((x, y))
    >>> point_from_good_type_xy.spec
    (2, 3, 0)

    ### good type xyz
    >>> point_from_good_type_xyz = point.Point((x, y, z))
    >>> point_from_good_type_xyz.spec
    (2, 3, 4)

#   _is_number
    >>> point_x = point.Point((1, 2, 3))
    >>> point_x._is_number('a')
    False
    >>> point_x._is_number([1])
    False
    >>> point_x._is_number(1)
    True
    >>> point_x._is_number(1.1)
    True

#   from_coords(x, y, z)
    >>> x = 2
    >>> y = 3
    >>> z = 4

    ### bad type
    >>> point_from_bad_type = point.Point.from_coords('x', y, z)
    Point.__init__:
        The argument must be a 2- or 3-tuple of numbers
    
    ### good type xy
    >>> point_from_good_type_xy = point.Point.from_coords(x, y)
    >>> point_from_good_type_xy.spec
    (2, 3, 0)

    ### good type xyz
    >>> point_from_good_type_xyz = point.Point.from_coords(x, y, z)
    >>> point_from_good_type_xyz.spec
    (2, 3, 4)

### represent
    >>> p234 = point.Point((2, 3, 4))
    >>> p123456 = point.Point((1.2, 3.4, 5.6))

#   __str__
    >>> str(p234)
    '(2, 3, 4)'
    >>> repr(p234)
    '(2, 3, 4)'

#   __repr__
    >>> str(p123456)
    '(1.2, 3.4, 5.6)'
    >>> repr(p123456)
    '(1.2, 3.4, 5.6)'

#   listing
    >>> print p234.listing()
    (2, 3, 4)
    >>> print p234.listing(1)
    (2.0, 3.0, 4.0)
    >>> print p234.listing(2.1)
    Point.listing:
        The argument must be an integer
    None
    >>> print p234.listing(-1.3)
    Point.listing:
        The argument must be an integer
    None
    >>> print p234.listing(-1)
    Point.listing:
        The argument must be non-negative
    None

#   get_formatted_coord
    >>> print p234.get_formatted_coord(25)
    Point.get_formatted_coord:
        The dimension must be a string ('x', 'y', or 'z')
    None
    >>> print p234.get_formatted_coord('p')
    Point.get_formatted_coord:
        The dimension must be either 'x', 'y', or 'z'
    None
    >>> print p234.get_formatted_coord('x')
    2
    >>> print p234.get_formatted_coord('x', 1)
    2.0
    >>> print p234.get_formatted_coord('x', 1.2)
    2.0
    >>> print p234.get_formatted_coord('x', -2)
    2
    >>> print p234.get_formatted_coord('x', -2.3)
    2
    >>> print p234.get_formatted_coord('y')
    3

### relations
#   __eq__
    >>> point_eq =  point.Point.from_coords(0, 0, 0)
    >>> point_eq == point.Point.from_coords(0, 0, 0)
    True
    >>> point_eq == point.Point.from_coords(0, 0, 1)
    False
    >>> point_eq == point.Point.from_coords(0, 1, 0)
    False
    >>> point_eq == point.Point.from_coords(1, 0, 0)
    False

#   __ge__
    >>> point_ge  = point.Point.from_coords( 0,  0,  0)

    >>> point_ge >= point.Point.from_coords(-1,  0,  0)
    True
    >>> point_ge >= point.Point.from_coords( 0, -1,  0)
    True
    >>> point_ge >= point.Point.from_coords( 0,  0, -1)
    True
    >>> point_ge >= point.Point.from_coords( 0,  0,  0)
    True
    >>> point_ge >= point.Point.from_coords( 0,  0,  1)
    False
    >>> point_ge >= point.Point.from_coords( 0,  1,  0)
    False
    >>> point_ge >= point.Point.from_coords( 1,  0,  0)
    False

#   __gt__
    >>> point_gt = point.Point.from_coords( 0,  0,  0)
    >>> point_gt > point.Point.from_coords(-1,  0,  0)
    True
    >>> point_gt > point.Point.from_coords( 0, -1,  0)
    True
    >>> point_gt > point.Point.from_coords( 0,  0, -1)
    True
    >>> point_gt > point.Point.from_coords( 0,  0,  0)
    False
    >>> point_gt > point.Point.from_coords( 0,  0,  1)
    False
    >>> point_gt > point.Point.from_coords( 0,  1,  0)
    False
    >>> point_gt > point.Point.from_coords( 1,  0,  0)
    False

#   __le__
    >>> point_le  = point.Point.from_coords( 0,  0,  0)
    >>> point_le <= point.Point.from_coords(-1,  0,  0)
    False
    >>> point_le <= point.Point.from_coords( 0, -1,  0)
    False
    >>> point_le <= point.Point.from_coords( 0,  0, -1)
    False
    >>> point_le <= point.Point.from_coords( 0,  0,  0)
    True
    >>> point_le <= point.Point.from_coords( 0,  0,  1)
    True
    >>> point_le <= point.Point.from_coords( 0,  1,  0)
    True
    >>> point_le <= point.Point.from_coords( 1,  0,  0)
    True

#   __lt__
    >>> point_lt = point.Point.from_coords( 0,  0,  0)
    >>> point_lt < point.Point.from_coords(-1,  0,  0)
    False
    >>> point_lt < point.Point.from_coords( 0, -1,  0)
    False
    >>> point_lt < point.Point.from_coords( 0,  0, -1)
    False
    >>> point_lt < point.Point.from_coords( 0,  0,  0)
    False
    >>> point_lt < point.Point.from_coords( 0,  0,  1)
    True
    >>> point_lt < point.Point.from_coords( 0,  1,  0)
    True
    >>> point_lt < point.Point.from_coords( 1,  0,  0)
    True

#   __ne__
    >>> point_ne  = point.Point.from_coords(0, 0, 0)
    >>> point_ne != point.Point.from_coords(0, 0, 0)
    False
    >>> point_ne != point.Point.from_coords(0, 0, 1)
    True
    >>> point_ne != point.Point.from_coords(0, 1, 0)
    True
    >>> point_ne != point.Point.from_coords(1, 0, 0)
    True

### other
#   is_point_spec(cls)
    >>> bad_type = 37
    >>> bad_type_element = (1.2, 3.4, 'c')
    >>> bad_type_length = (1.2, 3.4)
    >>> good_arg = (1.2, 3.4, 5.6)
    >>> point.Point.is_point_spec(bad_type)
    False
    >>> point.Point.is_point_spec(bad_type_element)
    False
    >>> point.Point.is_point_spec(bad_type_length)
    False
    >>> point.Point.is_point_spec(good_arg)
    True

#   _print_error_message
    >>> test_method_name = 'test_method'
    >>> test_message = 'This is a test'
    >>> point.Point._print_error_message(test_method_name, test_message)
    Point.test_method:
        This is a test
