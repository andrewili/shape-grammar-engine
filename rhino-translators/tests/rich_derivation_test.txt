#   rich_derivation_test.txt

    >>> import rich_derivation
    >>> import rule
    >>> import shape


### __init__
    ??? rich_derivation_from_non_list = rich_derivation.RichDerivation(37)
    The argument must be a non-empty list of strings
    ??? rich_derivation_from_empty_list = rich_derivation.RichDerivation([])
    The argument must be a non-empty list of strings
    ??? rich_derivation_from_list_of_non_strings = rich_derivation.RichDerivation(
    ...     [23, 37])
    The argument must be a non-empty list of strings

    ??? def make_rich_derivation_from_good_file():
    ...     good_file = ['a', 'b']
    ...     new_rich_derivation = rich_derivation.RichDerivation(good_file)
    ...     return new_rich_derivation
    ??? rich_derivation_from_good_file = make_rich_derivation_from_good_file()
    ??? print(rich_derivation_from_good_file.__repr__())
    <__repr__>

### _get_rich_derivation_parts
    >>> sierpinski_drv_text_lines = [
    ...     '# derivation file version 1.00                           --chen liang 2007/08/06',
    ...     '<BLANKLINE>',
    ...     'shape    delete_labeled_point_L',
    ...     '    name',
    ...     '    coords 0 0 0 0',
    ...     '<BLANKLINE>',
    ...     '    point 0 a',
    ...     'shape    delete_labeled_point_R',
    ...     '    name',
    ...     'shape    labeled_tetrahedron',
    ...     '    name',
    ...     '    coords 0 0 0 0',
    ...     '    coords 1 0 0 8',
    ...     '    coords 2 0 8 0',
    ...     '    coords 3 2 2 2',
    ...     '    coords 4 8 0 0',
    ...     '<BLANKLINE>',
    ...     '    line 0 0 1',
    ...     '    line 1 0 2',
    ...     '    line 2 0 4',
    ...     '    line 3 1 2',
    ...     '    line 4 1 4',
    ...     '    line 5 2 4',
    ...     '    point 3 a',
    ...     'shape    subdivide_tetrahedron_L',
    ...     '    name',
    ...     '    coords 0 0 0 0',
    ...     '    coords 1 0 0 8',
    ...     '    coords 2 0 8 0',
    ...     '    coords 3 2 2 2',
    ...     '    coords 4 8 0 0',
    ...     '<BLANKLINE>',
    ...     '    line 0 0 1',
    ...     '    line 1 0 2',
    ...     '    line 2 0 4',
    ...     '    line 3 1 2',
    ...     '    line 4 1 4',
    ...     '    line 5 2 4',
    ...     '    point 3 a',
    ...     'shape    subdivide_tetrahedron_R',
    ...     '    name',
    ...     '    coords 0 0 0 0', 
    ...     '    coords 1 0 0 4', 
    ...     '    coords 10 4 0 4', 
    ...     '    coords 11 4 4 0', 
    ...     '    coords 12 5 1 1', 
    ...     '    coords 13 8 0 0',
    ...     '    coords 2 0 0 8', 
    ...     '    coords 3 0 4 0', 
    ...     '    coords 4 0 4 4', 
    ...     '    coords 5 0 8 0', 
    ...     '    coords 6 1 1 1', 
    ...     '    coords 7 1 1 5', 
    ...     '    coords 8 1 5 1', 
    ...     '    coords 9 4 0 0', 
    ...     '<BLANKLINE>',
    ...     '    line 0 0 2', 
    ...     '    line 1 0 5', 
    ...     '    line 10 3 9', 
    ...     '    line 11 3 11', 
    ...     '    line 12 4 10', 
    ...     '    line 13 4 11', 
    ...     '    line 14 5 13', 
    ...     '    line 15 9 10', 
    ...     '    line 17 9 11', 
    ...     '    line 18 10 11',
    ...     '    line 2 0 13', 
    ...     '    line 3 1 3', 
    ...     '    line 4 1 4', 
    ...     '    line 5 1 9', 
    ...     '    line 6 1 10', 
    ...     '    line 7 2 5', 
    ...     '    line 8 2 13', 
    ...     '    line 9 3 4', 
    ...     '    point 6 a', 
    ...     '    point 7 a', 
    ...     '    point 8 a', 
    ...     '    point 12 a',
    ...     'initial    labeled_tetrahedron',
    ...     'rule    subdivide_tetrahedron    subdivide_tetrahedron_L -> subdivide_tetrahedron_R',
    ...     'rule    delete_labeled_point    delete_labeled_point_L -> delete_labeled_point_R',
    ...     '# derivation record',
    ...     'shape    labeled_tetrahedron',
    ...     '    name',
    ...     '    coords 0 0 0 0',
    ...     '    coords 1 0 0 8',
    ...     '    coords 2 0 8 0',
    ...     '    coords 3 2 2 2',
    ...     '    coords 4 8 0 0',
    ...     '<BLANKLINE>',
    ...     '    line 0 0 1',
    ...     '    line 1 0 2',
    ...     '    line 2 0 4',
    ...     '    line 3 1 2',
    ...     '    line 4 1 4',
    ...     '    line 5 2 4',
    ...     '    point 3 a',
    ...     'rule    subdivide_tetrahedron',
    ...     'shape    labeled_tetrahedron_subdivide_tetrahedron',
    ...     '    name',
    ...     '    coords 0 0 0 0', 
    ...     '    coords 1 0 0 4', 
    ...     '    coords 10 4 0 4', 
    ...     '    coords 11 4 4 0', 
    ...     '    coords 12 5 1 1', 
    ...     '    coords 13 8 0 0',
    ...     '    coords 2 0 0 8', 
    ...     '    coords 3 0 4 0', 
    ...     '    coords 4 0 4 4', 
    ...     '    coords 5 0 8 0', 
    ...     '    coords 6 1 1 1', 
    ...     '    coords 7 1 1 5', 
    ...     '    coords 8 1 5 1', 
    ...     '    coords 9 4 0 0', 
    ...     '<BLANKLINE>',
    ...     '    line 0 0 2', 
    ...     '    line 1 0 5', 
    ...     '    line 10 3 9', 
    ...     '    line 11 3 11', 
    ...     '    line 12 4 10', 
    ...     '    line 13 4 11', 
    ...     '    line 14 5 13', 
    ...     '    line 15 9 10', 
    ...     '    line 16 9 11', 
    ...     '    line 17 10 11',
    ...     '    line 2 0 13', 
    ...     '    line 3 1 3', 
    ...     '    line 4 1 4', 
    ...     '    line 5 1 9', 
    ...     '    line 6 1 10', 
    ...     '    line 7 2 5', 
    ...     '    line 8 2 13', 
    ...     '    line 9 3 4', 
    ...     '    point 6 a', 
    ...     '    point 7 a', 
    ...     '    point 8 a', 
    ...     '    point 12 a',
    ...     'rule    delete_labeled_point',
    ...     'shape    labeled_tetrahedron_subdivide_tetrahedron_delete_labeled_point',
    ...     '    name',
    ...     '    coords 0 0 0 0', 
    ...     '    coords 1 0 0 4', 
    ...     '    coords 2 0 0 8', 
    ...     '    coords 3 0 4 0', 
    ...     '    coords 4 0 4 4', 
    ...     '    coords 5 0 8 0', 
    ...     '    coords 6 4 0 0', 
    ...     '    coords 7 4 0 4', 
    ...     '    coords 8 4 4 0', 
    ...     '    coords 9 8 0 0',
    ...     '<BLANKLINE>',
    ...     '    line 0 0 2', 
    ...     '    line 1 0 5', 
    ...     '    line 10 3 6', 
    ...     '    line 11 3 8', 
    ...     '    line 12 4 7', 
    ...     '    line 13 4 8', 
    ...     '    line 14 5 9', 
    ...     '    line 15 6 7', 
    ...     '    line 16 6 8', 
    ...     '    line 17 7 8',
    ...     '    line 2 0 9', 
    ...     '    line 3 1 3', 
    ...     '    line 4 1 4', 
    ...     '    line 5 1 6', 
    ...     '    line 6 1 7', 
    ...     '    line 7 2 5', 
    ...     '    line 8 2 9', 
    ...     '    line 9 3 4'
    ... ]
    >>> sierpinski_rich_derivation_parts = (
    ...     rich_derivation.RichDerivation._get_rich_derivation_parts(
    ...         sierpinski_drv_text_lines))
    >>> (   
    ...     sierpinski_grammar_initial_shapes,
    ...     sierpinski_grammar_rules,
    ...     sierpinski_derivation_shapes,
    ...     sierpinski_derivation_rules
    ... ) = sierpinski_rich_derivation_parts

    ??? for shape_i in sorted(sierpinski_grammar_shapes_dict):
    ...     print(sierpinski_grammar_shapes_dict[shape_i].__repr__())
    (delete_labeled_point_L, [(0.0, 0.0, 0.0)], [], [(0, 'a')])
    (delete_labeled_point_R, [], [], [])
    (labeled_tetrahedron, [(0.0, 0.0, 0.0), (0.0, 0.0, 8.0), (0.0, 8.0, 0.0), (2.0, 2.0, 2.0), (8.0, 0.0, 0.0)], [(0, 1), (0, 2), (0, 4), (1, 2), (1, 4), (2, 4)], [(3, 'a')])
    (subdivide_tetrahedron_L, [(0.0, 0.0, 0.0), (0.0, 0.0, 8.0), (0.0, 8.0, 0.0), (2.0, 2.0, 2.0), (8.0, 0.0, 0.0)], [(0, 1), (0, 2), (0, 4), (1, 2), (1, 4), (2, 4)], [(3, 'a')])
    (subdivide_tetrahedron_R, [(0.0, 0.0, 0.0), (0.0, 0.0, 4.0), (0.0, 0.0, 8.0), (0.0, 4.0, 0.0), (0.0, 4.0, 4.0), (0.0, 8.0, 0.0), (1.0, 1.0, 1.0), (1.0, 1.0, 5.0), (1.0, 5.0, 1.0), (4.0, 0.0, 0.0), (4.0, 0.0, 4.0), (4.0, 4.0, 0.0), (5.0, 1.0, 1.0), (8.0, 0.0, 0.0)], [(0, 2), (0, 5), (0, 13), (1, 3), (1, 4), (1, 9), (1, 10), (2, 5), (2, 13), (3, 4), (3, 9), (3, 11), (4, 10), (4, 11), (5, 13), (9, 10), (9, 11), (10, 11)], [(6, 'a'), (7, 'a'), (8, 'a'), (12, 'a')])

    >>> for shape_i in sierpinski_grammar_initial_shapes:
    ...     print(shape_i.__repr__())
    (labeled_tetrahedron, [(0.0, 0.0, 0.0), (0.0, 0.0, 8.0), (0.0, 8.0, 0.0), (2.0, 2.0, 2.0), (8.0, 0.0, 0.0)], [(0, 1), (0, 2), (0, 4), (1, 2), (1, 4), (2, 4)], [(3, 'a')])

    >>> for rule_i in sierpinski_grammar_rules:
    ...     print(rule_i.__repr__())
    (subdivide_tetrahedron, (subdivide_tetrahedron_L, [(0.0, 0.0, 0.0), (0.0, 0.0, 8.0), (0.0, 8.0, 0.0), (2.0, 2.0, 2.0), (8.0, 0.0, 0.0)], [(0, 1), (0, 2), (0, 4), (1, 2), (1, 4), (2, 4)], [(3, 'a')]), (subdivide_tetrahedron_R, [(0.0, 0.0, 0.0), (0.0, 0.0, 4.0), (0.0, 0.0, 8.0), (0.0, 4.0, 0.0), (0.0, 4.0, 4.0), (0.0, 8.0, 0.0), (1.0, 1.0, 1.0), (1.0, 1.0, 5.0), (1.0, 5.0, 1.0), (4.0, 0.0, 0.0), (4.0, 0.0, 4.0), (4.0, 4.0, 0.0), (5.0, 1.0, 1.0), (8.0, 0.0, 0.0)], [(0, 2), (0, 5), (0, 13), (1, 3), (1, 4), (1, 9), (1, 10), (2, 5), (2, 13), (3, 4), (3, 9), (3, 11), (4, 10), (4, 11), (5, 13), (9, 10), (9, 11), (10, 11)], [(6, 'a'), (7, 'a'), (8, 'a'), (12, 'a')]))
    (delete_labeled_point, (delete_labeled_point_L, [(0.0, 0.0, 0.0)], [], [(0, 'a')]), (delete_labeled_point_R, [], [], []))

    >>> for derivation_rule in sierpinski_derivation_rules:
    ...     print(derivation_rule.__repr__())
    (subdivide_tetrahedron, (subdivide_tetrahedron_L, [(0.0, 0.0, 0.0), (0.0, 0.0, 8.0), (0.0, 8.0, 0.0), (2.0, 2.0, 2.0), (8.0, 0.0, 0.0)], [(0, 1), (0, 2), (0, 4), (1, 2), (1, 4), (2, 4)], [(3, 'a')]), (subdivide_tetrahedron_R, [(0.0, 0.0, 0.0), (0.0, 0.0, 4.0), (0.0, 0.0, 8.0), (0.0, 4.0, 0.0), (0.0, 4.0, 4.0), (0.0, 8.0, 0.0), (1.0, 1.0, 1.0), (1.0, 1.0, 5.0), (1.0, 5.0, 1.0), (4.0, 0.0, 0.0), (4.0, 0.0, 4.0), (4.0, 4.0, 0.0), (5.0, 1.0, 1.0), (8.0, 0.0, 0.0)], [(0, 2), (0, 5), (0, 13), (1, 3), (1, 4), (1, 9), (1, 10), (2, 5), (2, 13), (3, 4), (3, 9), (3, 11), (4, 10), (4, 11), (5, 13), (9, 10), (9, 11), (10, 11)], [(6, 'a'), (7, 'a'), (8, 'a'), (12, 'a')]))
    (delete_labeled_point, (delete_labeled_point_L, [(0.0, 0.0, 0.0)], [], [(0, 'a')]), (delete_labeled_point_R, [], [], []))

    >>> for shape_i in sierpinski_derivation_shapes:
    ...     print(shape_i.__repr__())
    (labeled_tetrahedron, [(0.0, 0.0, 0.0), (0.0, 0.0, 8.0), (0.0, 8.0, 0.0), (2.0, 2.0, 2.0), (8.0, 0.0, 0.0)], [(0, 1), (0, 2), (0, 4), (1, 2), (1, 4), (2, 4)], [(3, 'a')])
    (labeled_tetrahedron_subdivide_tetrahedron, [(0.0, 0.0, 0.0), (0.0, 0.0, 4.0), (0.0, 0.0, 8.0), (0.0, 4.0, 0.0), (0.0, 4.0, 4.0), (0.0, 8.0, 0.0), (1.0, 1.0, 1.0), (1.0, 1.0, 5.0), (1.0, 5.0, 1.0), (4.0, 0.0, 0.0), (4.0, 0.0, 4.0), (4.0, 4.0, 0.0), (5.0, 1.0, 1.0), (8.0, 0.0, 0.0)], [(0, 2), (0, 5), (0, 13), (1, 3), (1, 4), (1, 9), (1, 10), (2, 5), (2, 13), (3, 4), (3, 9), (3, 11), (4, 10), (4, 11), (5, 13), (9, 10), (9, 11), (10, 11)], [(6, 'a'), (7, 'a'), (8, 'a'), (12, 'a')])
    (labeled_tetrahedron_subdivide_tetrahedron_delete_labeled_point, [(0.0, 0.0, 0.0), (0.0, 0.0, 4.0), (0.0, 0.0, 8.0), (0.0, 4.0, 0.0), (0.0, 4.0, 4.0), (0.0, 8.0, 0.0), (4.0, 0.0, 0.0), (4.0, 0.0, 4.0), (4.0, 4.0, 0.0), (8.0, 0.0, 0.0)], [(0, 2), (0, 5), (0, 9), (1, 3), (1, 4), (1, 6), (1, 7), (2, 5), (2, 9), (3, 4), (3, 6), (3, 8), (4, 7), (4, 8), (5, 9), (6, 7), (6, 8), (7, 8)], [])


### _look_up_derivation_rule
    >>> def make_parts_for_look_up_derivation_rule():
    ...     def make_shorten_oblong():
    ...         shorten_oblong_text_lines = [
    ...             'shape    shorten-oblong_L',
    ...             '    name ',
    ...             '    coords 0 0 0 0',
    ...             '    coords 1 0 0 2',
    ...             '    coords 2 0 2 1',
    ...             '    coords 3 0 4 0',
    ...             '    coords 4 0 4 2',
    ...             '    coords 5 8 0 0',
    ...             '    coords 6 8 0 2',
    ...             '    coords 7 8 4 0',
    ...             '    coords 8 8 4 2',
    ...             '<BLANKLINE>',
    ...             '    line 0 0 1',
    ...             '    line 1 0 3',
    ...             '    line 10 6 8',
    ...             '    line 11 7 8',
    ...             '    line 2 0 5',
    ...             '    line 3 1 4',
    ...             '    line 4 1 6',
    ...             '    line 5 3 4',
    ...             '    line 6 3 7',
    ...             '    line 7 4 8',
    ...             '    line 8 5 6',
    ...             '    line 9 5 7',
    ...             '    point 2 a',
    ...             'shape    shorten-oblong_R',
    ...             '    name ',
    ...             '    coords 0 0 0 0',
    ...             '    coords 1 0 0 2',
    ...             '    coords 10 4 4 0',
    ...             '    coords 11 4 4 2',
    ...             '    coords 2 0 2 1',
    ...             '    coords 3 0 4 0',
    ...             '    coords 4 0 4 2',
    ...             '    coords 5 4 0 0',
    ...             '    coords 6 4 0 2',
    ...             '    coords 7 4 4 0',
    ...             '    coords 8 4 0 0',
    ...             '    coords 9 4 0 2',
    ...             '<BLANKLINE>',
    ...             '    line 0 0 1',
    ...             '    line 1 0 3',
    ...             '    line 10 8 9',
    ...             '    line 11 10 11',
    ...             '    line 2 0 8',
    ...             '    line 3 1 4',
    ...             '    line 4 1 6',
    ...             '    line 5 3 4',
    ...             '    line 6 3 7',
    ...             '    line 7 4 11',
    ...             '    line 8 5 7',
    ...             '    line 9 6 11',
    ...             '    point 2 a',
    ...             'rule    shorten-oblong    shorten-oblong_L -> shorten-oblong_R'
    ...         ]
    ...         shorten_oblong = rule.Rule.new_from_rul_text_lines(
    ...             shorten_oblong_text_lines)
    ...         return shorten_oblong
    ...     tokens = ['shorten-oblong']
    ...     shorten_oblong = make_shorten_oblong()
    ...     grammar_rules_dict = {shorten_oblong.name: shorten_oblong}
    ...     return (tokens, grammar_rules_dict)
    >>> tokens, grammar_rules_dict = (
    ...     make_parts_for_look_up_derivation_rule())
    >>> new_derivation_rule = (
    ...     rich_derivation.RichDerivation._look_up_derivation_rule(
    ...         tokens, grammar_rules_dict))
    >>> print(new_derivation_rule.__repr__())
    (shorten-oblong, (shorten-oblong_L, [(0.0, 0.0, 0.0), (0.0, 0.0, 2.0), (0.0, 2.0, 1.0), (0.0, 4.0, 0.0), (0.0, 4.0, 2.0), (8.0, 0.0, 0.0), (8.0, 0.0, 2.0), (8.0, 4.0, 0.0), (8.0, 4.0, 2.0)], [(0, 1), (0, 3), (0, 5), (1, 4), (1, 6), (3, 4), (3, 7), (4, 8), (5, 6), (5, 7), (6, 8), (7, 8)], [(2, 'a')]), (shorten-oblong_R, [(0.0, 0.0, 0.0), (0.0, 0.0, 2.0), (0.0, 2.0, 1.0), (0.0, 4.0, 0.0), (0.0, 4.0, 2.0), (4.0, 0.0, 0.0), (4.0, 0.0, 2.0), (4.0, 4.0, 0.0), (4.0, 4.0, 2.0)], [(0, 1), (0, 3), (0, 5), (1, 4), (1, 6), (3, 4), (3, 7), (4, 8), (5, 6), (5, 7), (6, 8), (7, 8)], [(2, 'a')]))
