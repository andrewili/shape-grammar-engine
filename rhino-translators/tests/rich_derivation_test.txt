#   rich_derivation_test.txt

    >>> import rich_derivation
    >>> import rule
    >>> import shape

    ??? def make_minimal_rich_derivation():
    ...     minimal_rich_drv_text_lines = [
    ...         '# derivation file version 1.00                           --chen liang 2007/08/06',
    ...         '<BLANKLINE>',
    ...         'shape    erase-lpoint_L',
    ...         '    name ',
    ...         '    coords 0 1 1 1',
    ...         '<BLANKLINE>',
    ...         '    point 0 a',
    ...         'shape    erase-lpoint_R',
    ...         '    name ',
    ...         'shape    labeled_point',
    ...         '    name ',
    ...         '    coords 0 0 0 0',
    ...         '<BLANKLINE>',
    ...         '    point 0 a',
    ...         'initial    labeled-point',
    ...         'rule    erase-lpoint    erase-lpoint_L -> erase-lpoint_R',
    ...         '# derivation record',
    ...         'shape    labeled-point',
    ...         '    name ',
    ...         '    name ',
    ...         '    coords 0 0 0 0',
    ...         '<BLANKLINE>',
    ...         '    point 0 a',
    ...         'rule    erase-lpoint',
    ...         'shape    labeled-point_erase-lpoint',
    ...         '    name ',
    ...     ]
    ...     minimal_rich_derivation = rich_derivation.RichDerivation(
    ...         minimal_rich_drv_text_lines)
    ...     return minimal_rich_derivation
    ??? minimal_rich_derivation = make_minimal_rich_derivation()

    ??? rich_derivation_drone = rich_derivation.RichDerivation(['kilroy'])

### __init__
    ??? rich_derivation_from_non_list = rich_derivation.RichDerivation(37)
    The argument must be a non-empty list of strings
    ??? rich_derivation_from_empty_list = rich_derivation.RichDerivation([])
    The argument must be a non-empty list of strings
    ??? rich_derivation_from_list_of_non_strings = rich_derivation.RichDerivation(
    ...     [23, 37])
    The argument must be a non-empty list of strings

    ??? def make_rich_derivation_from_good_file():
    ...     good_file = ['a', 'b']
    ...     new_rich_derivation = rich_derivation.RichDerivation(good_file)
    ...     return new_rich_derivation
    ??? rich_derivation_from_good_file = make_rich_derivation_from_good_file()
    ??? print(rich_derivation_from_good_file.__repr__())
    <__repr__>

### _get_grammar_and_derivation_parts   ##  use this!
    >>> def get_sierpinski_grammar_and_derivation_parts():
    ...     def make_grammar_shapes():
    ...         labeled_tetrahedron = shape.Shape(
    ...             'labeled_tetrahedron',
    ...             [   ((0, 0, 0), (0, 8, 0)), 
    ...                 ((0, 0, 0), (8, 0, 0)), 
    ...                 ((0, 0, 0), (0, 0, 8)),
    ...                 ((0, 0, 8), (0, 8, 0)),
    ...                 ((0, 0, 8), (8, 0, 0)),
    ...                 ((0, 8, 0), (8, 0, 0))],
    ...             [((2, 2, 2), 'a')])
    ...         subdivide_tetrahedron_L = shape.Shape(
    ...             'subdivide_tetrahedron_L',
    ...             [   ((0, 0, 0), (0, 8, 0)),
    ...                 ((0, 0, 0), (8, 0, 0)),
    ...                 ((0, 0, 0), (0, 0, 8)),
    ...                 ((0, 0, 8), (0, 8, 0)),
    ...                 ((0, 0, 8), (8, 0, 0)),
    ...                 ((0, 8, 0), (8, 0, 0))],
    ...             [((2, 2, 2), 'a')])
    ...         subdivide_tetrahedron_R = shape.Shape(
    ...             'subdivide_tetrahedron_R',
    ...             [   ((0, 0, 0), (0, 0, 8)),
    ...                 ((0, 0, 0), (0, 8, 0)),
    ...                 ((0, 0, 0), (8, 0, 0)),
    ...                 ((0, 0, 4), (0, 4, 0)),
    ...                 ((0, 0, 4), (0, 4, 4)),
    ...                 ((0, 0, 4), (4, 0, 0)),
    ...                 ((0, 0, 4), (4, 0, 4)),
    ...                 ((0, 0, 8), (0, 8, 0)),
    ...                 ((0, 0, 8), (8, 0, 0)),
    ...                 ((0, 4, 0), (0, 4, 4)),
    ...                 ((0, 4, 0), (4, 0, 0)),
    ...                 ((0, 4, 0), (4, 4, 0)),
    ...                 ((0, 4, 4), (4, 0, 4)),
    ...                 ((0, 4, 4), (4, 4, 0)),
    ...                 ((0, 8, 0), (8, 0, 0)),
    ...                 ((4, 0, 0), (4, 0, 4)),
    ...                 ((4, 0, 0), (4, 4, 0)),
    ...                 ((4, 0, 4), (4, 4, 0))],
    ...             [   ((1, 1, 1), 'a'),
    ...                 ((1, 1, 5), 'a'),
    ...                 ((1, 5, 1), 'a'),
    ...                 ((5, 1, 1), 'a')])
    ...         delete_labeled_point_L = shape.Shape(
    ...             'delete_labeled_point_L',
    ...             [],
    ...             [((0, 0, 0), 'a')])
    ...         delete_labeled_point_R = shape.Shape(
    ...             'delete_labeled_point_R', [], [])
    ...         grammar_shapes = (
    ...             labeled_tetrahedron,
    ...             subdivide_tetrahedron_L,
    ...             subdivide_tetrahedron_R,
    ...             delete_labeled_point_L, 
    ...             delete_labeled_point_R)
    ...         return grammar_shapes
    ...     def make_grammar_rules():
    ...         subdivide_tetrahedron = rule.Rule(
    ...             'subdivide_tetrahedron',
    ...             grammar_shapes[1],
    ...             grammar_shapes[2])
    ...         delete_labeled_point = rule.Rule(
    ...             'delete_labeled_point',
    ...             grammar_shapes[3],
    ...             grammar_shapes[4])
    ...         grammar_rules = (
    ...             subdivide_tetrahedron, delete_labeled_point)
    ...         return grammar_rules
    ...     def make_derivation_rules():
    ...         derivation_rules = (
    ...             grammar_rules[0], 
    ...             grammar_rules[1])
    ...         return derivation_rules 
    ...     def make_derivation_next_shapes():
    ...         labeled_tetrahedron_subdivide_tetrahedron = shape.Shape(
    ...             'labeled_tetrahedron_subdivide_tetrahedron',
    ...             [   ((0, 0, 0), (0, 0, 8)),
    ...                 ((0, 0, 0), (0, 8, 0)), 
    ...                 ((0, 0, 0), (8, 0, 0)), 
    ...                 ((0, 0, 4), (0, 4, 0)),
    ...                 ((0, 0, 4), (0, 4, 4)),
    ...                 ((0, 0, 4), (4, 0, 0)),
    ...                 ((0, 0, 4), (4, 0, 4)),
    ...                 ((0, 0, 8), (0, 8, 0)),
    ...                 ((0, 0, 8), (8, 0, 0)),
    ...                 ((0, 4, 0), (0, 4, 4)),
    ...                 ((0, 4, 0), (4, 0, 0)),
    ...                 ((0, 4, 0), (4, 4, 0)),
    ...                 ((0, 4, 4), (4, 0, 4)),
    ...                 ((0, 4, 4), (4, 4, 0)),
    ...                 ((0, 8, 0), (8, 0, 0)),
    ...                 ((4, 0, 0), (4, 0, 4)),
    ...                 ((4, 0, 0), (4, 4, 0)),
    ...                 ((4, 0, 4), (4, 4, 0))],
    ...             [   ((1, 1, 1), 'a'),
    ...                 ((1, 1, 5), 'a'),
    ...                 ((1, 5, 1), 'a'),
    ...                 ((5, 1, 1), 'a')])
    ...         labeled_tetrahedron_subdivide_tetrahedron_delete_labeled_point = shape.Shape(
    ...             'labeled_tetrahedron_subdivide_tetrahedron_delete_labeled_point',
    ...             [   ((0, 0, 0), (0, 0, 8)),
    ...                 ((0, 0, 0), (0, 8, 0)), 
    ...                 ((0, 0, 0), (8, 0, 0)), 
    ...                 ((0, 0, 4), (0, 4, 0)),
    ...                 ((0, 0, 4), (0, 4, 4)),
    ...                 ((0, 0, 4), (4, 0, 0)),
    ...                 ((0, 0, 4), (4, 0, 4)),
    ...                 ((0, 0, 8), (0, 8, 0)),
    ...                 ((0, 0, 8), (8, 0, 0)),
    ...                 ((0, 4, 0), (0, 4, 4)),
    ...                 ((0, 4, 0), (4, 0, 0)),
    ...                 ((0, 4, 0), (4, 4, 0)),
    ...                 ((0, 4, 4), (4, 0, 4)),
    ...                 ((0, 4, 4), (4, 4, 0)),
    ...                 ((0, 8, 0), (8, 0, 0)),
    ...                 ((4, 0, 0), (4, 0, 4)),
    ...                 ((4, 0, 0), (4, 4, 0)),
    ...                 ((4, 0, 4), (4, 4, 0))],
    ...             [])
    ...         derivation_next_shapes = (
    ...             labeled_tetrahedron_subdivide_tetrahedron,
    ...             labeled_tetrahedron_subdivide_tetrahedron_delete_labeled_point)
    ...         return derivation_next_shapes
    ...     grammar_shapes = make_grammar_shapes()
    ...     grammar_initial_shapes = [grammar_shapes[0]]
    ...     grammar_rules = make_grammar_rules()
    ...     derivation_initial_shape = grammar_shapes[0]
    ...     derivation_rules = make_derivation_rules()
    ...     derivation_next_shapes = make_derivation_next_shapes()
    ...     parts = (
    ...         grammar_initial_shapes,
    ...         grammar_rules,
    ...         derivation_initial_shape,
    ...         derivation_rules,
    ...         derivation_next_shapes)
    ...     return parts
    >>> sierpinski_grammar_and_derivation_parts = (
    ...     get_sierpinski_grammar_and_derivation_parts())
    >>> (   sierpinski_grammar_initial_shapes,
    ...     sierpinski_grammar_rules,
    ...     sierpinski_derivation_initial_shape,
    ...     sierpinski_derivation_rules,
    ...     sierpinski_derivation_next_shapes
    ... ) = sierpinski_grammar_and_derivation_parts
    >>> for initial_shape in sierpinski_grammar_initial_shapes:
    ...     print(initial_shape.__repr__())
    (labeled_tetrahedron, [(0, 0, 0), (0, 0, 8), (0, 8, 0), (2, 2, 2), (8, 0, 0)], [(0, 1), (0, 2), (0, 4), (1, 2), (1, 4), (2, 4)], [(3, 'a')])
    >>> for grammar_rule in sierpinski_grammar_rules:
    ...     print(grammar_rule.__repr__())
    (subdivide_tetrahedron, (subdivide_tetrahedron_L, [(0, 0, 0), (0, 0, 8), (0, 8, 0), (2, 2, 2), (8, 0, 0)], [(0, 1), (0, 2), (0, 4), (1, 2), (1, 4), (2, 4)], [(3, 'a')]), (subdivide_tetrahedron_R, [(0, 0, 0), (0, 0, 4), (0, 0, 8), (0, 4, 0), (0, 4, 4), (0, 8, 0), (1, 1, 1), (1, 1, 5), (1, 5, 1), (4, 0, 0), (4, 0, 4), (4, 4, 0), (5, 1, 1), (8, 0, 0)], [(0, 2), (0, 5), (0, 13), (1, 3), (1, 4), (1, 9), (1, 10), (2, 5), (2, 13), (3, 4), (3, 9), (3, 11), (4, 10), (4, 11), (5, 13), (9, 10), (9, 11), (10, 11)], [(6, 'a'), (7, 'a'), (8, 'a'), (12, 'a')]))
    (delete_labeled_point, (delete_labeled_point_L, [(0, 0, 0)], [], [(0, 'a')]), (delete_labeled_point_R, [], [], []))
    >>> print(sierpinski_derivation_initial_shape.__repr__())
    (labeled_tetrahedron, [(0, 0, 0), (0, 0, 8), (0, 8, 0), (2, 2, 2), (8, 0, 0)], [(0, 1), (0, 2), (0, 4), (1, 2), (1, 4), (2, 4)], [(3, 'a')])
    >>> for derivation_rule in sierpinski_derivation_rules:
    ...     print(derivation_rule.__repr__())
    (subdivide_tetrahedron, (subdivide_tetrahedron_L, [(0, 0, 0), (0, 0, 8), (0, 8, 0), (2, 2, 2), (8, 0, 0)], [(0, 1), (0, 2), (0, 4), (1, 2), (1, 4), (2, 4)], [(3, 'a')]), (subdivide_tetrahedron_R, [(0, 0, 0), (0, 0, 4), (0, 0, 8), (0, 4, 0), (0, 4, 4), (0, 8, 0), (1, 1, 1), (1, 1, 5), (1, 5, 1), (4, 0, 0), (4, 0, 4), (4, 4, 0), (5, 1, 1), (8, 0, 0)], [(0, 2), (0, 5), (0, 13), (1, 3), (1, 4), (1, 9), (1, 10), (2, 5), (2, 13), (3, 4), (3, 9), (3, 11), (4, 10), (4, 11), (5, 13), (9, 10), (9, 11), (10, 11)], [(6, 'a'), (7, 'a'), (8, 'a'), (12, 'a')]))
    (delete_labeled_point, (delete_labeled_point_L, [(0, 0, 0)], [], [(0, 'a')]), (delete_labeled_point_R, [], [], []))
    >>> for shape_i in sierpinski_derivation_next_shapes:
    ...     print(shape_i.__repr__())
    (labeled_tetrahedron_subdivide_tetrahedron, [(0, 0, 0), (0, 0, 4), (0, 0, 8), (0, 4, 0), (0, 4, 4), (0, 8, 0), (1, 1, 1), (1, 1, 5), (1, 5, 1), (4, 0, 0), (4, 0, 4), (4, 4, 0), (5, 1, 1), (8, 0, 0)], [(0, 2), (0, 5), (0, 13), (1, 3), (1, 4), (1, 9), (1, 10), (2, 5), (2, 13), (3, 4), (3, 9), (3, 11), (4, 10), (4, 11), (5, 13), (9, 10), (9, 11), (10, 11)], [(6, 'a'), (7, 'a'), (8, 'a'), (12, 'a')])
    (labeled_tetrahedron_subdivide_tetrahedron_delete_labeled_point, [(0, 0, 0), (0, 0, 4), (0, 0, 8), (0, 4, 0), (0, 4, 4), (0, 8, 0), (4, 0, 0), (4, 0, 4), (4, 4, 0), (8, 0, 0)], [(0, 2), (0, 5), (0, 9), (1, 3), (1, 4), (1, 6), (1, 7), (2, 5), (2, 9), (3, 4), (3, 6), (3, 8), (4, 7), (4, 8), (5, 9), (6, 7), (6, 8), (7, 8)], [])


### _look_up_derivation_rule
    >>> def make_parts_for_look_up_derivation_rule():
    ...     def make_shorten_oblong():
    ...         shorten_oblong_text_lines = [
    ...             'shape    shorten-oblong_L',
    ...             '    name ',
    ...             '    coords 0 0 0 0',
    ...             '    coords 1 0 0 2',
    ...             '    coords 2 0 2 1',
    ...             '    coords 3 0 4 0',
    ...             '    coords 4 0 4 2',
    ...             '    coords 5 8 0 0',
    ...             '    coords 6 8 0 2',
    ...             '    coords 7 8 4 0',
    ...             '    coords 8 8 4 2',
    ...             '<BLANKLINE>',
    ...             '    line 0 0 1',
    ...             '    line 1 0 3',
    ...             '    line 10 6 8',
    ...             '    line 11 7 8',
    ...             '    line 2 0 5',
    ...             '    line 3 1 4',
    ...             '    line 4 1 6',
    ...             '    line 5 3 4',
    ...             '    line 6 3 7',
    ...             '    line 7 4 8',
    ...             '    line 8 5 6',
    ...             '    line 9 5 7',
    ...             '    point 2 a',
    ...             'shape    shorten-oblong_R',
    ...             '    name ',
    ...             '    coords 0 0 0 0',
    ...             '    coords 1 0 0 2',
    ...             '    coords 10 4 4 0',
    ...             '    coords 11 4 4 2',
    ...             '    coords 2 0 2 1',
    ...             '    coords 3 0 4 0',
    ...             '    coords 4 0 4 2',
    ...             '    coords 5 4 0 0',
    ...             '    coords 6 4 0 2',
    ...             '    coords 7 4 4 0',
    ...             '    coords 8 4 0 0',
    ...             '    coords 9 4 0 2',
    ...             '<BLANKLINE>',
    ...             '    line 0 0 1',
    ...             '    line 1 0 3',
    ...             '    line 10 8 9',
    ...             '    line 11 10 11',
    ...             '    line 2 0 8',
    ...             '    line 3 1 4',
    ...             '    line 4 1 6',
    ...             '    line 5 3 4',
    ...             '    line 6 3 7',
    ...             '    line 7 4 11',
    ...             '    line 8 5 7',
    ...             '    line 9 6 11',
    ...             '    point 2 a',
    ...             'rule    shorten-oblong    shorten-oblong_L -> shorten-oblong_R'
    ...         ]
    ...         shorten_oblong = rule.Rule.new_from_rul_text_lines(
    ...             shorten_oblong_text_lines)
    ...         return shorten_oblong
    ...     tokens = ['shorten-oblong']
    ...     shorten_oblong = make_shorten_oblong()
    ...     grammar_rules_dict = {shorten_oblong.name: shorten_oblong}
    ...     return (tokens, grammar_rules_dict)
    >>> tokens, grammar_rules_dict = (
    ...     make_parts_for_look_up_derivation_rule())
    >>> new_derivation_rule = (
    ...     rich_derivation.RichDerivation._look_up_derivation_rule(
    ...         tokens, grammar_rules_dict))
    >>> print(new_derivation_rule.__repr__())
    (shorten-oblong, (shorten-oblong_L, [(0.0, 0.0, 0.0), (0.0, 0.0, 2.0), (0.0, 2.0, 1.0), (0.0, 4.0, 0.0), (0.0, 4.0, 2.0), (8.0, 0.0, 0.0), (8.0, 0.0, 2.0), (8.0, 4.0, 0.0), (8.0, 4.0, 2.0)], [(0, 1), (0, 3), (0, 5), (1, 4), (1, 6), (3, 4), (3, 7), (4, 8), (5, 6), (5, 7), (6, 8), (7, 8)], [(2, 'a')]), (shorten-oblong_R, [(0.0, 0.0, 0.0), (0.0, 0.0, 2.0), (0.0, 2.0, 1.0), (0.0, 4.0, 0.0), (0.0, 4.0, 2.0), (4.0, 0.0, 0.0), (4.0, 0.0, 2.0), (4.0, 4.0, 0.0), (4.0, 4.0, 2.0)], [(0, 1), (0, 3), (0, 5), (1, 4), (1, 6), (3, 4), (3, 7), (4, 8), (5, 6), (5, 7), (6, 8), (7, 8)], [(2, 'a')]))
