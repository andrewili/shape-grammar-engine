#   rule_test.txt

# import rhinoscriptsyntax as rs

    >>> import rule
    >>> import shape

### to do
### __init__, __str__, __repr__
    >>> def make_left_shape():
    ...     left_shape_name = 'left-shape'
    ...     left_line_specs = [
    ...         ((0, 0, 0), (0, 2, 0)),
    ...         ((0, 0, 0), (2, 0, 0))]
    ...     left_lpoint_specs = [
    ...         ((0, 0, 0), 'p00'),
    ...         ((1, 1, 0), 'p11')]
    ...     left_shape = (shape.Shape(
    ...         left_shape_name, left_line_specs, left_lpoint_specs))
    ...     return left_shape
    >>> def make_right_shape():
    ...     right_shape_name = 'right-shape'
    ...     right_line_specs = [
    ...         ((0, 2, 0), (2, 2, 0)),
    ...         ((2, 0, 0), (2, 2, 0))]
    ...     right_lpoint_specs = [
    ...         ((2, 2, 0), 'p22'),
    ...         ((1, 1, 0), 'p11')]
    ...     right_shape = (shape.Shape(
    ...         right_shape_name, right_line_specs, right_lpoint_specs))
    ...     return right_shape
    >>> left_shape = make_left_shape()
    >>> right_shape = make_right_shape()
    >>> rule_name = 'new-rule'

    >>> new_rule = rule.Rule(rule_name, left_shape, right_shape)
    >>> print(new_rule)
    shape new-rule_L
        name left-shape
        coords 0 0.000000 0.000000 0.000000
        coords 1 0.000000 2.000000 0.000000
        coords 2 1.000000 1.000000 0.000000
        coords 3 2.000000 0.000000 0.000000
    <BLANKLINE>
        line 0 0 1
        line 1 0 3
        point 0 p00
        point 2 p11
    shape new-rule_R
        name right-shape
        coords 0 0.000000 2.000000 0.000000
        coords 1 1.000000 1.000000 0.000000
        coords 2 2.000000 0.000000 0.000000
        coords 3 2.000000 2.000000 0.000000
    <BLANKLINE>
        line 0 0 3
        line 1 2 3
        point 1 p11
        point 3 p22
    rule    new-rule    new-rule_L -> new-rule_R

    >>> new_rule_bad_name = rule.Rule(37, left_shape, right_shape)
    The arguments must be str, Shape, and Shape

    >>> new_rule_bad_left_shape = (
    ...     rule.Rule('bad-rule', 'bad-left-shape', right_shape))
    The arguments must be str, Shape, and Shape

### to do
### new_from_rul_text
    >>> new_rul_text = [
    ...     'shape new-rule_L',
    ...     '    name left-shape',
    ...     '    coords 0 0.000000 0.000000 0.000000',
    ...     '    coords 1 0.000000 2.000000 0.000000',
    ...     '    coords 2 1.000000 1.000000 0.000000',
    ...     '    coords 3 2.000000 0.000000 0.000000',
    ...     '',
    ...     '    line 0 0 1',
    ...     '    line 1 0 3',
    ...     '    point 0 p00',
    ...     '    point 2 p11',
    ...     'shape new-rule_R',
    ...     '    name right-shape',
    ...     '    coords 0 0.000000 2.000000 0.000000',
    ...     '    coords 1 1.000000 1.000000 0.000000',
    ...     '    coords 2 2.000000 0.000000 0.000000',
    ...     '    coords 3 2.000000 2.000000 0.000000',
    ...     '',
    ...     '    line 0 0 3',
    ...     '    line 1 2 3',
    ...     '    point 1 p11',
    ...     '    point 3 p22',
    ...     'rule    new-rule    new-rule_L -> new-rule_R'
    ... ]

    >>> new_rule_from_text = rule.Rule.new_from_rul_text(rul_text)
    >>> print(new_rule.__repr__())
    new-rule
    left-shape
    [(0, 0, 0), (0, 2, 0), (1, 1, 0), (2, 0, 0)]
    [(0, 1), (0, 3)]
    [(0, 'p00'), (2, 'p11')]
    right-shape
    [(0, 2, 0), (1, 1, 0), (2, 0, 0), (2, 2, 0)]
    [(0, 3), (2, 3)]
    [(1, 'p11'), (3, 'p22')]

### get_container_shape
