#   sg_column_test.txt

    >>> import sg_column
    >>> import sg_line
    
    >>> empty_column = sg_column.SGColumn([])
    You're trying to make a column with non-collinear lines or no lines
    
    >>> def not_collinear(lines):               #   redundant
    ...     carrier = lines[0].carrier
    ...     for line in lines:
    ...         if line.carrier != carrier:
    ...             return True
    ...     return False

    ### construct, represent
__init__(lines), __str__()
    >>> line_0002 = sg_line.SGLine.from_spec(0, 0, 0, 2)
    >>> line_0800 = sg_line.SGLine.from_spec(0, 8, 0, 10)
    >>> line_0103 = sg_line.SGLine.from_spec(0, 1, 0, 3)
    >>> line_4060 = sg_line.SGLine.from_spec(4, 0, 6, 0)
    >>> line_02 = sg_line.SGLine.from_spec(0, 0, 2, 2)
    >>> line_13 = sg_line.SGLine.from_spec(1, 1, 3, 3)
    >>> line_46 = sg_line.SGLine.from_spec(4, 4, 6, 6)
    >>> line_80 = sg_line.SGLine.from_spec(8, 8, 10, 10)

    >>> empty_lines = []
    >>> col_max_ord_lines = [line_4060, line_0103, line_0002]
    >>> col_max_ORD_lines = [line_0002, line_4060, line_0103]
    >>> col_MAX_ord_lines = [line_4060, line_0800, line_0002]
    >>> col_MAX_ORD_lines = [line_0002, line_4060, line_0800]
    >>> COL_max_ord_lines = [line_13, line_02, line_46]
    >>> COL_max_ORD_lines = [line_02, line_13, line_46]
    >>> COL_MAX_ord_lines = [line_80, line_02, line_46]
    >>> COL_MAX_ORD_lines = [line_02, line_46, line_80]

    >>> empty_column = sg_column.SGColumn(empty_lines)
    You're trying to make a column with non-collinear lines or no lines
    >>> col_max_ord_column = sg_column.SGColumn(col_max_ord_lines)
    You're trying to make a column with non-collinear lines or no lines
    >>> col_max_ORD_column = sg_column.SGColumn(col_max_ORD_lines)
    You're trying to make a column with non-collinear lines or no lines
    >>> col_MAX_ord_column = sg_column.SGColumn(col_MAX_ord_lines)
    You're trying to make a column with non-collinear lines or no lines
    >>> col_MAX_ORD_column = sg_column.SGColumn(col_MAX_ORD_lines)
    You're trying to make a column with non-collinear lines or no lines
    >>> COL_max_ord_column = sg_column.SGColumn(COL_max_ord_lines)
    >>> COL_max_ORD_column = sg_column.SGColumn(COL_max_ORD_lines)
    >>> COL_MAX_ord_column = sg_column.SGColumn(COL_MAX_ord_lines)
    >>> COL_MAX_ORD_column = sg_column.SGColumn(COL_MAX_ORD_lines)

    >>> print COL_max_ord_column
    [(0, 0, 3, 3), (4, 4, 6, 6)]
    >>> print COL_max_ORD_column
    [(0, 0, 3, 3), (4, 4, 6, 6)]
    >>> print COL_MAX_ord_column
    [(0, 0, 2, 2), (4, 4, 6, 6), (8, 8, 10, 10)]
    >>> print COL_MAX_ORD_column
    [(0, 0, 2, 2), (4, 4, 6, 6), (8, 8, 10, 10)]

not_collinear(lines)
    >>> line_0002 = sg_line.SGLine.from_spec(0, 0, 0, 2)
    >>> line_0103 = sg_line.SGLine.from_spec(0, 1, 0, 3)
    >>> line_4060 = sg_line.SGLine.from_spec(4, 0, 6, 0)
    >>> col_max_ord_lines = [line_4060, line_0103, line_0002]

    >>> not_collinear(col_max_ord_lines)
    True

    ### maximize
reduce_column(unreduced_column)
    
    ??? def make_unreduced_column():    
    ...     line_02 = make_line_from_spec(0, 0, 2, 2)
    ...     line_13 = make_line_from_spec(1, 1, 3, 3)
    ...     line_46 = make_line_from_spec(4, 4, 6, 6)
    ...     line_56 = make_line_from_spec(5, 5, 6, 6)
    ...     line_79 = make_line_from_spec(7, 7, 9, 9)
    ...     line_89 = make_line_from_spec(8, 8, 9, 9)
    ...     return [line_02, line_13, line_46, line_56, line_79, line_89]
    
    ??? unreduced_column = make_unreduced_column()
    ??? reduced_column = es.reduce_column(unreduced_column)
    ??? for line in sorted(reduced_column):
    ...     print line
    (0, 0, 3, 3)
    (4, 4, 6, 6)
    (7, 7, 9, 9)

get_first_maximal_line_from_unreduced_column(column)
    
    ??? line_01 = make_line_from_spec(0, 0, 1, 1)
    ??? line_23 = make_line_from_spec(2, 2, 3, 3)
    
    ??? column = [line_01, line_23]
    ??? print es.get_first_maximal_line_from_unreduced_column(column)
    (0, 0, 1, 1)
    ??? len(column)
    1
    ??? print es.get_first_maximal_line_from_unreduced_column(column)
    (2, 2, 3, 3)
    ??? len(column)
    0

get_line_from_singleton_column(column)
    
    ??? line_01 = make_line_from_spec(0, 0, 1, 1)
    
    ??? column = [line_01]
    ??? new_line = es.get_line_from_singleton_column(column)
    ??? print new_line
    (0, 0, 1, 1)
    ??? len(column)
    0

get_first_maximal_line_from_non_singleton_unreduced_column(column)
    
    len(column) >= 2

    case 1: len() == 2: line_1 and line_2 are not mergeable
    
    ??? def make_column_for_next_maximal_line():
    ...     line_01 = make_line_from_spec(0, 0, 1, 1)
    ...     line_23 = make_line_from_spec(2, 2, 3, 3)
    ...     return [line_01, line_23]
    
    ??? column = make_column_for_next_maximal_line()
    ??? new_line_1 = es.get_first_maximal_line_from_non_singleton_unreduced_column(column)
    ??? print new_line_1
    (0, 0, 1, 1)
    ??? len(column)
    1
    ??? print es.get_column_listing(column)
        (2, 2, 3, 3)

    case 2: len() == 2: line_1 and line_2 are mergeable
    
    ??? def make_column_for_mergeable_lines():
    ...     line_02 = make_line_from_spec(0, 0, 2, 2)
    ...     line_13 = make_line_from_spec(1, 1, 3, 3)
    ...     return [line_02, line_13]
    
    ??? column = make_column_for_mergeable_lines()
    ??? new_line_2 = es.get_first_maximal_line_from_non_singleton_unreduced_column(column)
    ??? print new_line_2
    (0, 0, 3, 3)
    ??? len(column)
    0

    case 3: len() == 3: line_1 and line_2 are mergeable,
        line_12 cannot be merged with line_3
    
    ??? def make_column_for_mergeable_lines():
    ...     line_02 = make_line_from_spec(0, 0, 2, 2)
    ...     line_13 = make_line_from_spec(1, 1, 3, 3)
    ...     line_46 = make_line_from_spec(4, 4, 6, 6)
    ...     return [line_02, line_13, line_46]
    
    ??? column = make_column_for_mergeable_lines()
    ??? new_line_3 = es.get_first_maximal_line_from_non_singleton_unreduced_column(column)
    ??? print new_line_3
    (0, 0, 3, 3)
    ??? len(column)
    1
    ??? print es.get_column_listing(column)
        (4, 4, 6, 6)

    case 4: len == 4: line_1 and line_2 can be merged,
        line_12 can be merged with line_3, line_123 cannot be
        merged with line_4
    
    ??? def make_column_for_length_4_mergeable():
    ...     line_02 = make_line_from_spec(0, 0, 2, 2)
    ...     line_13 = make_line_from_spec(1, 1, 3, 3)
    ...     line_35 = make_line_from_spec(3, 3, 5, 5)
    ...     line_67 = make_line_from_spec(6, 6, 7, 7)
    ...     return [line_02, line_13, line_35, line_67]
    
    ??? column = make_column_for_length_4_mergeable()
    ??? new_line_4 = es.get_first_maximal_line_from_non_singleton_unreduced_column(column)
    ??? print new_line_4
    (0, 0, 5, 5)
    ??? len(column)
    1
    ??? print es.get_column_listing(column)
        (6, 6, 7, 7)

lines_can_be_merged(line_1, line_2)
    
    line_1, and line_2 are collinear.
    
    ??? line_26 = make_line_from_spec(2, 2, 6, 6)     #     ====
    ??? line_01 = make_line_from_spec(0, 0, 1, 1)     #   -
    ??? line_02 = make_line_from_spec(0, 0, 2, 2)     #   --
    ??? line_13 = make_line_from_spec(1, 1, 3, 3)     #    --
    ??? line_17 = make_line_from_spec(1, 1, 7, 7)     #    ------
    ??? line_24 = make_line_from_spec(2, 2, 4, 4)     #     --
    
                                            #     ====
    
    ??? line_35 = make_line_from_spec(3, 3, 5, 5)     #      --
    ??? line_46 = make_line_from_spec(4, 4, 6, 6)     #       --
    ??? line_57 = make_line_from_spec(5, 5, 7, 7)     #        --
    ??? line_68 = make_line_from_spec(6, 6, 8, 8)     #         --
    ??? line_78 = make_line_from_spec(7, 7, 8, 8)     #          -
    
                                            #     ====

    ??? es.lines_can_be_merged(line_26, line_02)
    True
    ??? es.lines_can_be_merged(line_26, line_68)
    True
    ??? es.lines_can_be_merged(line_26, line_13)
    True
    ??? es.lines_can_be_merged(line_26, line_57)
    True
    ??? es.lines_can_be_merged(line_26, line_24)
    True
    ??? es.lines_can_be_merged(line_26, line_46)
    True
    ??? es.lines_can_be_merged(line_26, line_35)
    True
    ??? es.lines_can_be_merged(line_26, line_17)
    True
    ??? es.lines_can_be_merged(line_26, line_01)
    False
    ??? es.lines_can_be_merged(line_26, line_78)
    False

merge_lines(line_1, line_2)
    
    Given 2 mergeable (collinear) lines, line_1.tail <= line_2.tail,
    returns a new merged line.
    
    >>> line    = sg_line.SGLine.from_short_spec(0, 6)      #   ======
    >>> line_03 = sg_line.SGLine.from_short_spec(0, 3)      #   ---
    >>> line_06 = sg_line.SGLine.from_short_spec(0, 6)      #   ------
    >>> line_08 = sg_line.SGLine.from_short_spec(0, 8)      #   --------
    >>> line_34 = sg_line.SGLine.from_short_spec(3, 4)      #      -
    >>> line_36 = sg_line.SGLine.from_short_spec(3, 6)      #      ---
    >>> line_38 = sg_line.SGLine.from_short_spec(3, 8)      #      -----
    >>> line_68 = sg_line.SGLine.from_short_spec(6, 8)      #         --
    
    >>> print empty_column.merge_lines(line, line_03)
    (0, 0, 6, 6)
    >>> print empty_column.merge_lines(line, line_06)
    (0, 0, 6, 6)
    >>> print empty_column.merge_lines(line, line_08)
    (0, 0, 8, 8)
    >>> print empty_column.merge_lines(line, line_34)
    (0, 0, 6, 6)
    >>> print empty_column.merge_lines(line, line_36)
    (0, 0, 6, 6)
    >>> print empty_column.merge_lines(line, line_38)
    (0, 0, 8, 8)
    >>> print empty_column.merge_lines(line, line_68)
    (0, 0, 8, 8)

