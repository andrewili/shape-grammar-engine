#   line_cell_test.txt

    >>> import line
    >>> import line_cell
    
    >>> drone_line_cell = line_cell.LineCell([line.Line.from_short_spec(0, 1)])

    ### construct, represent
__init__(lines), __str__(), listing()
    >>> def lines_for_init_test():
    ...     no_lines = []
    ...     line_0001 = line.Line.from_spec(0, 0, 0, 1)
    ...     line_0010 = line.Line.from_spec(0, 0, 1, 0)
    ...     line_02 = line.Line.from_short_spec(0, 2)
    ...     line_13 = line.Line.from_short_spec(1, 3)
    ...     line_46 = line.Line.from_short_spec(4, 6)
    ...     non_collinear_lines = [line_0001, line_0010]
    ...     collinear_lines = [line_46, line_13, line_02]
    ...     return [no_lines, non_collinear_lines, collinear_lines]
    >>> no_lines, non_collinear_lines, collinear_lines = lines_for_init_test()

    >>> empty_line_cell = line_cell.LineCell(no_lines)
    You're trying to make a line cell with non-collinear lines or no lines
    >>> non_collinear_line_cell = line_cell.LineCell(non_collinear_lines)
    You're trying to make a line cell with non-collinear lines or no lines
    >>> collinear_line_cell = line_cell.LineCell(collinear_lines)
    >>> print collinear_line_cell
    [(0, 0, 2, 2), (1, 1, 3, 3), (4, 4, 6, 6)]
    >>> print collinear_line_cell.listing()
    (0.0, 0.0, 2.0, 2.0)
    (1.0, 1.0, 3.0, 3.0)
    (4.0, 4.0, 6.0, 6.0)
    >>> print collinear_line_cell.listing(-1)
    (0.0, 0.0, 2.0, 2.0)
    (1.0, 1.0, 3.0, 3.0)
    (4.0, 4.0, 6.0, 6.0)
    >>> print collinear_line_cell.listing(2)
            (0.0, 0.0, 2.0, 2.0)
            (1.0, 1.0, 3.0, 3.0)
            (4.0, 4.0, 6.0, 6.0)

    ### collinear
collinear(lines)
    ??? def lines_for_collinear_test():
    ...     line_0002 = line.Line.from_spec(0, 0, 0, 2)
    ...     line_0103 = line.Line.from_spec(0, 1, 0, 3)
    ...     line_4060 = line.Line.from_spec(4, 0, 6, 0)
    ...     collinear_lines = [line_0002, line_0103]
    ...     non_collinear_lines = [line_4060, line_0103, line_0002]
    ...     return [collinear_lines, non_collinear_lines]
    ??? collinear_lines, non_collinear_lines = lines_for_collinear_test()

    ??? drone_line_cell.collinear(collinear_lines)
    True
    ??? drone_line_cell.collinear(non_collinear_lines)
    False

    ### maximize
get_maximal_lines_from(maximal_lines_1, maximal_lines_2)
    ??? line_01 = line.Line.from_short_spec(0, 1)
    ??? line_02 = line.Line.from_short_spec(0, 2)
    ??? line_13 = line.Line.from_short_spec(1, 3)
    ??? line_23 = line.Line.from_short_spec(2, 3)
    ??? disjoint_lines = [line_01, line_23]
    ??? overlapping_lines = [line_02, line_13]

    ??? new_lines = drone_line_cell.get_maximal_lines_from(disjoint_lines, overlapping_lines)
    ??? for line in new_lines:
    ...     print line
    (0, 0, 3, 3)

maximal(non_maximal_lines)
    ??? def non_maximal_lines_for_maximal_test():
    ...     line_02 = line.Line.from_short_spec(0, 2)
    ...     line_13 = line.Line.from_short_spec(1, 3)
    ...     line_46 = line.Line.from_short_spec(4, 6)
    ...     line_56 = line.Line.from_short_spec(5, 6)
    ...     line_79 = line.Line.from_short_spec(7, 9)
    ...     line_89 = line.Line.from_short_spec(8, 9)
    ...     return [line_02, line_13, line_46, line_56, line_79, line_89]
    ??? non_maximal_lines = non_maximal_lines_for_maximal_test()

    ??? maximal_lines = drone_line_cell.maximal(non_maximal_lines)
    ??? for line in sorted(maximal_lines):
    ...     print line
    (0, 0, 3, 3)
    (4, 4, 6, 6)
    (7, 7, 9, 9)

get_first_maximal_line_from(lines)
    ??? def singleton_line_list_for_maximal_test():
    ...     line_01 = line.Line.from_short_spec(0, 1)
    ...     return [line_01]
    ??? singleton_line_list = singleton_line_list_for_maximal_test()
    ??? new_line_from_singleton_list = drone_line_cell.get_first_maximal_line_from(singleton_line_list)
    ??? print new_line_from_singleton_list
    (0, 0, 1, 1)

    ??? def non_singleton_list_for_maximal_test():
    ...     line_01 = line.Line.from_short_spec(0, 1)
    ...     line_12 = line.Line.from_short_spec(1, 2)
    ...     line_23 = line.Line.from_short_spec(2, 3)
    ...     return [line_01, line_12, line_23]
    ??? non_singleton_list = non_singleton_list_for_maximal_test()
    ??? new_line_from_non_singleton_list = drone_line_cell.get_first_maximal_line_from(non_singleton_list)
    ??? print new_line_from_non_singleton_list
    (0, 0, 3, 3)

get_singleton_line_from(singleton_lines)
    ??? line_01 = line.Line.from_short_spec(0, 1)
    ??? singleton_lines = [line_01]

    ??? new_line = drone_line_cell.get_singleton_line_from(singleton_lines)
    ??? print new_line
    (0, 0, 1, 1)
    ??? len(singleton_lines)
    0

get_first_maximal_line_from_non_singleton(non_maximal_lines)
    case 1: n = 2: line_1 and line_2 are not mergeable
    
    ??? def non_maximal_lines_for_non_singleton_test_1():
    ...     line_01 = line.Line.from_short_spec(0, 1)
    ...     line_23 = line.Line.from_short_spec(2, 3)
    ...     return [line_01, line_23]
    ??? non_maximal_lines_1 = non_maximal_lines_for_non_singleton_test_1()
    ??? new_line_1 = drone_line_cell.get_first_maximal_line_from_non_singleton(non_maximal_lines_1)
    ??? print new_line_1
    (0, 0, 1, 1)
    ??? len(non_maximal_lines_1)
    1
    ??? for line in non_maximal_lines_1:
    ...     print line
    (2, 2, 3, 3)

    case 2: n = 2: line_1 and line_2 are mergeable
    
    ??? def non_maximal_lines_for_non_singleton_test_2():
    ...     line_02 = line.Line.from_short_spec(0, 2)
    ...     line_13 = line.Line.from_short_spec(1, 3)
    ...     return [line_02, line_13]
    
    ??? non_maximal_lines_2 = non_maximal_lines_for_non_singleton_test_2()
    ??? new_line_2 = drone_line_cell.get_first_maximal_line_from_non_singleton(non_maximal_lines_2)
    ??? print new_line_2
    (0, 0, 3, 3)
    ??? len(non_maximal_lines_2)
    0

    case 3: n = 3: line_1 and line_2 are mergeable,
        new merged line_12 cannot be merged with line_3
    
    ??? def non_maximal_lines_for_non_singleton_test_3():
    ...     line_02 = line.Line.from_short_spec(0, 2)
    ...     line_13 = line.Line.from_short_spec(1, 3)
    ...     line_46 = line.Line.from_short_spec(4, 6)
    ...     return [line_02, line_13, line_46]
    
    ??? non_maximal_lines_3 = non_maximal_lines_for_non_singleton_test_3()
    ??? new_line_3 = drone_line_cell.get_first_maximal_line_from(non_maximal_lines_3)
    ??? print new_line_3
    (0, 0, 3, 3)
    ??? len(non_maximal_lines_3)
    1
    ??? for line in non_maximal_lines_3:
    ...     print line
    (4, 4, 6, 6)

    case 4: n = 4: line_1 and line_2 can be merged,
        line_12 can be merged with line_3,
        line_123 cannot be merged with line_4
    
    ??? def non_maximal_lines_for_non_singleton_test_4():
    ...     line_02 = line.Line.from_short_spec(0, 2)
    ...     line_13 = line.Line.from_short_spec(1, 3)
    ...     line_35 = line.Line.from_short_spec(3, 5)
    ...     line_67 = line.Line.from_short_spec(6, 7)
    ...     return [line_02, line_13, line_35, line_67]
    
    ??? non_maximal_lines_4 = non_maximal_lines_for_non_singleton_test_4()
    ??? new_line_4 = drone_line_cell.get_first_maximal_line_from_non_singleton(non_maximal_lines_4)
    ??? print new_line_4
    (0, 0, 5, 5)
    ??? len(non_maximal_lines_4)
    1
    ??? for line in non_maximal_lines_4:
    ...     print line
    (6, 6, 7, 7)

lines_can_be_merged(line_1, line_2)
    ??? def lines_for_mergeable_test():
    ...     line_26 = line.Line.from_short_spec(2, 6)      #     ====
    ...     line_01 = line.Line.from_short_spec(0, 1)      #   -
    ...     line_02 = line.Line.from_short_spec(0, 2)      #   --
    ...     line_13 = line.Line.from_short_spec(1, 3)      #    --
    ...     line_17 = line.Line.from_short_spec(1, 7)      #    ------
    ...     line_24 = line.Line.from_short_spec(2, 4)      #     --
    ...     line_35 = line.Line.from_short_spec(3, 5)      #      --
    ...     line_46 = line.Line.from_short_spec(4, 6)      #       --
    ...     line_57 = line.Line.from_short_spec(5, 7)      #        --
    ...     line_68 = line.Line.from_short_spec(6, 8)      #         --
    ...     line_78 = line.Line.from_short_spec(7, 8)      #          -
    ...     return [line_26, line_01, line_02, line_13, line_17, line_24, line_35, line_46, line_57, line_68, line_78]
    ??? line_26, line_01, line_02, line_13, line_17, line_24, line_35, line_46, line_57, line_68, line_78 = lines_for_mergeable_test()

    ??? drone_line_cell.lines_can_be_merged(line_26, line_02)
    True
    ??? drone_line_cell.lines_can_be_merged(line_26, line_68)
    True
    ??? drone_line_cell.lines_can_be_merged(line_26, line_13)
    True
    ??? drone_line_cell.lines_can_be_merged(line_26, line_57)
    True
    ??? drone_line_cell.lines_can_be_merged(line_26, line_24)
    True
    ??? drone_line_cell.lines_can_be_merged(line_26, line_46)
    True
    ??? drone_line_cell.lines_can_be_merged(line_26, line_35)
    True
    ??? drone_line_cell.lines_can_be_merged(line_26, line_17)
    True
    ??? drone_line_cell.lines_can_be_merged(line_26, line_01)
    False
    ??? drone_line_cell.lines_can_be_merged(line_26, line_78)
    False

    ### relations
__eq__(), __ne__()
    ??? line_1 = line.Line.from_short_spec(0, 1)
    ??? line_2 = line.Line.from_short_spec(2, 3)
    ??? line_cell_1a = line_cell.LineCell([line_1, line_2])
    ??? line_cell_1b = line_cell.LineCell([line_2, line_1])
    ??? line_cell_2 = line_cell.LineCell([line_1])

    ??? line_cell_1a == line_cell_1b
    True
    ??? line_cell_1a == line_cell_2
    False
    ??? line_cell_1a != line_cell_1b
    False
    ??? line_cell_1a != line_cell_2
    True

is_a_subline_cell_of()
    ??? def make_line_cells_for_sub_line_cell():
    ...     line_02 = line.Line.from_short_spec(0, 2)
    ...     line_12 = line.Line.from_short_spec(1, 2)
    ...     line_23 = line.Line.from_short_spec(2, 3)
    ...     line_45 = line.Line.from_short_spec(4, 5)
    ...     line_46 = line.Line.from_short_spec(4, 6)
    ...     line_56 = line.Line.from_short_spec(5, 6)
    ...     test_line_cell_12_45 = line_cell.LineCell([line_12, line_45])
    ...     line_cell_02_46 = line_cell.LineCell([line_02, line_46])
    ...     line_cell_02_56 = line_cell.LineCell([line_02, line_56])
    ...     line_cell_23_46 = line_cell.LineCell([line_23, line_46])
    ...     line_cell_23_56 = line_cell.LineCell([line_23, line_56])
    ...     return [test_line_cell_12_45, line_cell_02_46, line_cell_02_56, line_cell_23_46, line_cell_23_56]
    ??? test_line_cell_12_45, line_cell_02_46, line_cell_02_56, line_cell_23_46, line_cell_23_56 = make_line_cells_for_sub_line_cell()

    ??? print test_line_cell_12_45
    [(1, 1, 2, 2), (4, 4, 5, 5)]

    ??? test_line_cell_12_45.is_a_subline_cell_of(line_cell_02_46)
    True
    ??? test_line_cell_12_45.is_a_subline_cell_of(line_cell_02_56)
    False
    ??? test_line_cell_12_45.is_a_subline_cell_of(line_cell_23_46)
    False
    ??? test_line_cell_12_45.is_a_subline_cell_of(line_cell_23_56)
    False
