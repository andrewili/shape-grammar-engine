#   sg_lp_partition_test.txt

    >>> import sg_labeled_point
    >>> import sg_line
    >>> import sg_lp_partition

    >>> lp_partition_drone = sg_lp_partition.SGLPPartition([])

    ### construct, represent
    #   __init__(), __str__(), listing()

    >>> def non_lpoints_for_init_test():
    ...     line_01 = sg_line.SGLine.from_short_spec(0, 1)
    ...     lpoint_00a = sg_labeled_point.SGLabeledPoint(0, 0, 'a')
    ...     non_lpoints = [lpoint_00a, line_01]
    ...     return non_lpoints
    >>> non_lpoints = non_lpoints_for_init_test()
    >>> non_lpoint_partition = sg_lp_partition.SGLPPartition(non_lpoints)
    You're trying to make a partition with non labeled-points

    >>> empty_lpoint_partition = sg_lp_partition.SGLPPartition.new_empty()

    >>> print empty_lpoint_partition
    []
    >>> print empty_lpoint_partition.listing()
    <no labeled points>
    >>> empty_lpoint_partition.is_empty()
    True

    >>> def lpoints_for_init_test():
    ...     lpoint_00a = sg_labeled_point.SGLabeledPoint(0, 0, 'a')
    ...     lpoint_11a = sg_labeled_point.SGLabeledPoint(1, 1, 'a')
    ...     lpoint_22b = sg_labeled_point.SGLabeledPoint(2, 2, 'b')
    ...     lpoint_33b = sg_labeled_point.SGLabeledPoint(3, 3, 'b')
    ...     lpoints = [lpoint_33b, lpoint_22b, lpoint_11a, lpoint_00a]
    ...     return lpoints
    >>> lpoints = lpoints_for_init_test()
    >>> lpp = sg_lp_partition.SGLPPartition(lpoints)
    
    >>> print lpp
    [(0, 0, a), (1, 1, a), (2, 2, b), (3, 3, b)]

    >>> print lpp.listing()
    a:
        (0.0, 0.0)
        (1.0, 1.0)
    b:
        (2.0, 2.0)
        (3.0, 3.0)

    #   make_dictionary(lpoints)

    >>> def make_lpoints_for_make_dictionary_test():
    ...     lpoint_00a = sg_labeled_point.SGLabeledPoint(0, 0, 'a')
    ...     lpoint_11a = sg_labeled_point.SGLabeledPoint(1, 1, 'a')
    ...     lpoint_22b = sg_labeled_point.SGLabeledPoint(2, 2, 'b')
    ...     lpoints_1 = [lpoint_00a]
    ...     lpoints_2 = [lpoint_11a, lpoint_00a]
    ...     lpoints_3 = [lpoint_22b, lpoint_11a, lpoint_00a]
    ...     return [lpoints_1, lpoints_2, lpoints_3]
    >>> lpoints_1, lpoints_2, lpoints_3 = make_lpoints_for_make_dictionary_test()

    >>> dictionary_0 = lp_partition_drone.make_dictionary([])
    >>> for label in dictionary_0:
    ...     print '%s: %s' % (label, dictionary_0[label])
    >>> dictionary_1 = lp_partition_drone.make_dictionary(lpoints_1)
    >>> for label in dictionary_1:
    ...     print '%s: %s' % (label, dictionary_1[label])
    a: [(0, 0)]
    >>> dictionary_2 = lp_partition_drone.make_dictionary(lpoints_2)
    >>> for label in dictionary_2:
    ...     print '%s: %s' % (label, dictionary_2[label])
    a: [(0, 0), (1, 1)]
    >>> dictionary_3 = lp_partition_drone.make_dictionary(lpoints_3)
    >>> for label in dictionary_3:
    ...     print '%s: %s' % (label, dictionary_3[label])
    a: [(0, 0), (1, 1)]
    b: [(2, 2)]

    #   from_specs()

    >>> lp_specs = [(3, 3, 'b'), (2, 2, 'b'), (1, 1, 'a'), (0, 0, 'a')]
    >>> lpp_from_specs = sg_lp_partition.SGLPPartition.from_specs(lp_specs)
    >>> print lpp_from_specs
    [(0, 0, a), (1, 1, a), (2, 2, b), (3, 3, b)]

    ### compare
    #   __eq__(), __ne__()

    >>> test_specs = [(3, 3, 'b'), (2, 2, 'b'), (1, 1, 'a'), (0, 0, 'a')]
    >>> equal_specs = [(3, 3, 'b'), (2, 2, 'b'), (1, 1, 'a'), (0, 0, 'a')]
    >>> unequal_specs = [(3, 3, 'a'), (2, 2, 'b'), (1, 1, 'b'), (0, 0, 'a')]
    >>> lpp_test = sg_lp_partition.SGLPPartition.from_specs(test_specs)
    >>> lpp_equal = sg_lp_partition.SGLPPartition.from_specs(equal_specs)
    >>> lpp_unequal = sg_lp_partition.SGLPPartition.from_specs(unequal_specs)
    >>> lpp_empty = sg_lp_partition.SGLPPartition.new_empty()

    >>> lpp_test == lpp_equal
    True
    >>> lpp_test == lpp_unequal
    False
    >>> lpp_test == lpp_empty
    False

    >>> lpp_test != lpp_equal
    False
    >>> lpp_test != lpp_unequal
    True
    >>> lpp_test != lpp_empty
    True
    
    #   is_a_sub_partition_of(other_partition)

    >>> lpp_empty = sg_lp_partition.SGLPPartition([])
    >>> lpp_empty_b = sg_lp_partition.SGLPPartition([])
    >>> lpp_bigger = sg_lp_partition.SGLPPartition.from_specs([(4, 4, 'c'), (3, 3, 'b'), (2, 2, 'b'), (1, 1, 'a'), (0, 0, 'a')])
    >>> lpp_smaller = sg_lp_partition.SGLPPartition.from_specs([(2, 2, 'b'), (1, 1, 'a'), (0, 0, 'a')])

    >>> lpp_empty.is_a_sub_partition_of(lpp_empty_b)
    True
    >>> lpp_empty.is_a_sub_partition_of(lpp_test)
    True
    >>> lpp_test.is_a_sub_partition_of(lpp_bigger)
    True
    >>> lpp_test.is_a_sub_partition_of(lpp_smaller)
    False
    >>> lpp_test.is_a_sub_partition_of(lpp_empty)
    False

    #   colabelings_are_sub_colabelings_in(other_lp_partition)

    >>> def make_lpoint_partitions():
    ...     lpoint_00a = sg_labeled_point.SGLabeledPoint(0, 0, 'a')
    ...     lpoint_11a = sg_labeled_point.SGLabeledPoint(1, 1, 'a')
    ...     lpoint_22b = sg_labeled_point.SGLabeledPoint(2, 2, 'b')
    ...     lpoint_33b = sg_labeled_point.SGLabeledPoint(3, 3, 'b')
    ...     lpoint_33c = sg_labeled_point.SGLabeledPoint(3, 3, 'c')
    ...     lpoint_44c = sg_labeled_point.SGLabeledPoint(4, 4, 'c')
    ...     lpoints_bigger = [lpoint_44c, lpoint_33b, lpoint_22b, lpoint_11a, lpoint_00a]
    ...     lpoints_smaller = [lpoint_22b, lpoint_11a, lpoint_00a]
    ...     lpoints_different = [lpoint_33c, lpoint_22b, lpoint_11a, lpoint_00a]
    ...     lpp_bigger = sg_lp_partition.SGLPPartition(lpoints_bigger)
    ...     lpp_smaller = sg_lp_partition.SGLPPartition(lpoints_smaller)
    ...     lpp_different = sg_lp_partition.SGLPPartition(lpoints_different)
    ...     return (lpp_bigger, lpp_smaller, lpp_different)
    >>> lpp_bigger, lpp_smaller, lpp_different = make_lpoint_partitions()

    >>> lpp_test.colabelings_are_sub_colabelings_in(lpp_bigger)
    True
    >>> lpp_test.colabelings_are_sub_colabelings_in(lpp_smaller)
    False
    >>> lpp_test.colabelings_are_sub_colabelings_in(lpp_different)
    False

    ### operate
    #   __add__(other)
    
    >>> def make_lpps_for_add_test():
    ...     lpoint_11a = sg_labeled_point.SGLabeledPoint(1, 1, 'a')
    ...     lpoint_22b = sg_labeled_point.SGLabeledPoint(2, 2, 'b')
    ...     lpoint_33b = sg_labeled_point.SGLabeledPoint(3, 3, 'b')
    ...     lpoint_44c = sg_labeled_point.SGLabeledPoint(4, 4, 'c')
    ...     lpp_0a = sg_lp_partition.SGLPPartition([])
    ...     lpp_0b = sg_lp_partition.SGLPPartition([])
    ...     lpp_1 = sg_lp_partition.SGLPPartition([lpoint_22b, lpoint_11a])
    ...     lpp_2 = sg_lp_partition.SGLPPartition([lpoint_44c, lpoint_33b, lpoint_11a])
    ...     return (lpp_0a, lpp_0b, lpp_1, lpp_2)
    >>> lpp_0a, lpp_0b, lpp_1, lpp_2 = make_lpps_for_add_test()

    >>> new_lpp_00 = lpp_0a + lpp_0b
    >>> print new_lpp_00.listing()
    <no labeled points>
    
    >>> new_lpp_01 = lpp_0a + lpp_1
    >>> print new_lpp_01.listing()
    a:
        (1.0, 1.0)
    b:
        (2.0, 2.0)
    
    >>> new_lpp_20 = lpp_2 + lpp_0a
    >>> print new_lpp_20.listing()
    a:
        (1.0, 1.0)
    b:
        (3.0, 3.0)
    c:
        (4.0, 4.0)
    
    >>> new_lpp_12 = lpp_1 + lpp_2
    >>> print new_lpp_12.listing()
    a:
        (1.0, 1.0)
    b:
        (2.0, 2.0)
        (3.0, 3.0)
    c:
        (4.0, 4.0)

    #   __subtract__(other)
