#   colabeling_test.txt

    >>> import colabeling
    >>> import sg_labeled_point

    >>> def colabeling_drone_for_test():
    ...     lpoint = sg_labeled_point.SGLabeledPoint(0, 0, 'a')
    ...     drone = colabeling.Colabeling([lpoint])
    ...     return drone
    >>> colabeling_drone = colabeling_drone_for_test()

    ### construct, represent
    #   __init__(), __str__(), listing()

    >>> colabeling_empty = colabeling.Colabeling([])
    You're trying to make a colabeling with non-colabeled points or no points

    >>> def non_colabeled_lpoints_for_init_test():
    ...     lpoint_11a = sg_labeled_point.SGLabeledPoint(1, 1, 'a')
    ...     lpoint_22a = sg_labeled_point.SGLabeledPoint(2, 2, 'a')
    ...     lpoint_33b = sg_labeled_point.SGLabeledPoint(3, 3, 'b')
    ...     non_colabeled_lpoints = [lpoint_33b, lpoint_22a, lpoint_11a]
    ...     return non_colabeled_lpoints
    >>> non_colabeled_lpoints = non_colabeled_lpoints_for_init_test()

    >>> colabeling_non_colabeled = colabeling.Colabeling(non_colabeled_lpoints)
    You're trying to make a colabeling with non-colabeled points or no points

    >>> def lpoints_for_init_test():
    ...     lpoint_11x = sg_labeled_point.SGLabeledPoint(1, 1, 'x')
    ...     lpoint_22x = sg_labeled_point.SGLabeledPoint(2, 2, 'x')
    ...     lpoint_33x = sg_labeled_point.SGLabeledPoint(3, 3, 'x')
    ...     lpoints = [lpoint_33x, lpoint_22x, lpoint_11x]
    ...     return lpoints
    >>> lpoints = lpoints_for_init_test()
    >>> colabeling_control = colabeling.Colabeling(lpoints)

    >>> print colabeling_control
    [(1, 1), (2, 2), (3, 3)]
    >>> print colabeling_control.listing()
    (1.0, 1.0)
    (2.0, 2.0)
    (3.0, 3.0)
    >>> print colabeling_control.listing(-1)
    (1.0, 1.0)
    (2.0, 2.0)
    (3.0, 3.0)
    >>> print colabeling_control.listing(1)
        (1.0, 1.0)
        (2.0, 2.0)
        (3.0, 3.0)

    #   colabeled(lpoints)

    >>> def lpoints_for_colabeled_test():
    ...     lpoint_00a = sg_labeled_point.SGLabeledPoint(0, 0, 'a')
    ...     lpoint_11a = sg_labeled_point.SGLabeledPoint(1, 1, 'a')
    ...     lpoint_11b = sg_labeled_point.SGLabeledPoint(1, 1, 'b')
    ...     colabeled_lpoints = [lpoint_11a, lpoint_00a]
    ...     non_colabeled_lpoints = [lpoint_11b, lpoint_00a]
    ...     singleton_lpoint = [lpoint_00a]
    ...     return [colabeled_lpoints, non_colabeled_lpoints, singleton_lpoint]
    >>> colabeled_lpoints, non_colabeled_lpoints, singleton_lpoint = lpoints_for_colabeled_test()

    >>> colabeling_drone.colabeled(colabeled_lpoints)
    True
    >>> colabeling_drone.colabeled(non_colabeled_lpoints)
    False
    >>> colabeling_drone.colabeled(singleton_lpoint)
    True

    ### compare
    #   __eq__(), __ne__()

    >>> def colabelings_for_eq_ne_test():
    ...     lpoint_00a = sg_labeled_point.SGLabeledPoint(0, 0, 'a')
    ...     lpoint_11a = sg_labeled_point.SGLabeledPoint(1, 1, 'a')
    ...     lpoint_22a = sg_labeled_point.SGLabeledPoint(2, 2, 'a')
    ...     lpoints_test = [lpoint_11a, lpoint_00a]
    ...     lpoints_same = [lpoint_11a, lpoint_00a]
    ...     lpoints_different = [lpoint_22a, lpoint_00a]
    ...     colabeling_test = colabeling.Colabeling(lpoints_test)
    ...     colabeling_same = colabeling.Colabeling(lpoints_same)
    ...     colabeling_different = colabeling.Colabeling(lpoints_different)
    ...     return [colabeling_test, colabeling_same, colabeling_different]
    >>> colabeling_test, colabeling_same, colabeling_different = colabelings_for_eq_ne_test()

    >>> colabeling_test == colabeling_same
    True
    >>> colabeling_test == colabeling_different
    False
    >>> colabeling_test != colabeling_same
    False
    >>> colabeling_test != colabeling_different
    True

    #   is_a_subcolabeling_of(other)

    >>> def make_colabelings():
    ...     lpoint_a = sg_labeled_point.SGLabeledPoint(0, 0, 'x')
    ...     lpoint_b = sg_labeled_point.SGLabeledPoint(1, 1, 'x')
    ...     colabeling_a = colabeling.Colabeling([lpoint_a])
    ...     colabeling_b = colabeling.Colabeling([lpoint_b])
    ...     colabeling_ab = colabeling.Colabeling([lpoint_b, lpoint_a])
    ...     return (colabeling_a, colabeling_b, colabeling_ab)
    >>> colabeling_a, colabeling_b, colabeling_ab = make_colabelings()

    >>> colabeling_a.is_a_subcolabeling_of(colabeling_ab)
    True
    >>> colabeling_b.is_a_subcolabeling_of(colabeling_ab)
    True
    >>> colabeling_ab.is_a_subcolabeling_of(colabeling_a)
    False
    >>> colabeling_ab.is_a_subcolabeling_of(colabeling_b)
    False

    ### operate
    #   union(other)

    >>> def make_colabelings_for_union_test():
    ...     lpoint_00a = sg_labeled_point.SGLabeledPoint(0, 0, 'a')
    ...     lpoint_11a = sg_labeled_point.SGLabeledPoint(1, 1, 'a')
    ...     lpoint_22a = sg_labeled_point.SGLabeledPoint(2, 2, 'a')
    ...     colabeling_control = colabeling.Colabeling([lpoint_11a, lpoint_00a])
    ...     colabeling_other = colabeling.Colabeling([lpoint_22a, lpoint_00a])
    ...     return (colabeling_control, colabeling_other)
    >>> colabeling_control, colabeling_other = make_colabelings_for_union_test()

    >>> print colabeling_control.union(colabeling_control)
    [(0, 0), (1, 1)]
    >>> print colabeling_control.union(colabeling_other)
    [(0, 0), (1, 1), (2, 2)]
    >>> print colabeling_other.union(colabeling_control)
    [(0, 0), (1, 1), (2, 2)]
    >>> print colabeling_other.union(colabeling_other)
    [(0, 0), (2, 2)]

