#   line_test.txt

    >>> import sg_column
    >>> import line
    >>> import point

    >>> drone_line = line.Line.from_spec(0, 0, 10, 10)
    
### construct
#   __init__()
    
    >>> line_01 = line.Line.from_spec(0, 0, 1, 1)
    
    >>> print line_01.tail
    (0, 0)
    >>> print line_01.head
    (1, 1)
    >>> line_01.spec
    (0, 0, 1, 1)
    >>> line_01.carrier
    (45.0, 0)

    
    >>> zero_length_line = line.Line.from_spec(0, 0, 0, 0)
    You're trying to create a zero-length line
    
    
    >>> line_w_big_tail = line.Line.from_spec(1, 1, 0, 0)
    
    >>> print line_w_big_tail.tail
    (0, 0)
    >>> print line_w_big_tail.head
    (1, 1)
    

    >>> print line.Line.from_spec(0, 0, 0, 1).carrier
    (0.0, 0)
    >>> print line.Line.from_spec(0, 0, 1, 0).carrier
    (90.0, 0)
    >>> print line.Line.from_spec(0, 0, 1, 1).carrier
    (45.0, 0)
    >>> print line.Line.from_spec(0, 1, 0, 0).carrier
    (0.0, 0)
    >>> print line.Line.from_spec(0, 1, 1, 0).carrier
    (135.0, 1)
    >>> print line.Line.from_spec(0, 1, 1, 1).carrier
    (90.0, 1)
    >>> print line.Line.from_spec(1, 0, 0, 0).carrier
    (90.0, 0)
    >>> print line.Line.from_spec(1, 0, 0, 1).carrier
    (135.0, 1)
    >>> print line.Line.from_spec(1, 0, 1, 1).carrier
    (0.0, 1)
    >>> print line.Line.from_spec(1, 1, 0, 0).carrier
    (45.0, 0)
    >>> print line.Line.from_spec(1, 1, 0, 1).carrier
    (90.0, 1)
    >>> print line.Line.from_spec(1, 1, 1, 0).carrier
    (0.0, 1)

#   get_carrier_from(line_spec)
    >>> line_spec_0011 = (0, 0, 1, 1)
    >>> drone_line.get_carrier_from(line_spec_0011)
    (45.0, 0)
    >>> line_spec_0010 = (0, 0, 1, 0)
    >>> drone_line.get_carrier_from(line_spec_0010)
    (90.0, 0)
    >>> line_spec_0001 = (0, 0, 0, 1)
    >>> drone_line.get_carrier_from(line_spec_0001)
    (0.0, 0)

#   from_spec(x1, y1, x2, y2)
    >>> line_from_spec = line.Line.from_spec(0, 0, 1, 1)
    
    >>> print line_from_spec
    (0, 0, 1, 1)

#   from_short_spec(x1, x2)
    >>> line_from_short_spec = line.Line.from_short_spec(1, 2)
    >>> print line_from_short_spec
    (1, 1, 2, 2)

#   from_points(p1,p2)
    >>> p1 = point.Point(1, 1)
    >>> p2 = point.Point(2, 2)
    
    >>> line_from_points = line.Line.from_points(p1, p2)
    
    >>> print line_from_points
    (1, 1, 2, 2)

### represent
#   __str__()
    >>> print line.Line.from_spec(1, 1, 2, 2)
    (1, 1, 2, 2)

#   listing()
    >>> print line.Line.from_spec(1, 1, 2, 2).listing()
    (1.0, 1.0, 2.0, 2.0)

### ordering relations
#   __eq__(other)
    >>> line_eq =  line.Line.from_spec(4, 4, 6, 6)
    
    >>> line_eq == line.Line.from_spec(5, 5, 6, 6)
    False
    >>> line_eq == line.Line.from_spec(4, 4, 5, 5)
    False
    >>> line_eq == line.Line.from_spec(4, 4, 6, 6)
    True

#   __ge__(other)
    >>> line_ge  = line.Line.from_spec(4, 4, 6, 6)
    
    >>> line_ge >= line.Line.from_spec(3, 3, 5, 5)
    True
    >>> line_ge >= line.Line.from_spec(4, 4, 5, 5)
    True
    >>> line_ge >= line.Line.from_spec(4, 4, 6, 6)
    True
    >>> line_ge >= line.Line.from_spec(4, 4, 7, 7)
    False
    >>> line_ge >= line.Line.from_spec(6, 6, 7, 7)
    False

#   __gt__(other)
    >>> line_gt = line.Line.from_spec(4, 4, 6, 6)
    
    >>> line_gt > line.Line.from_spec(3, 3, 9, 9)
    True
    >>> line_gt > line.Line.from_spec(4, 4, 5, 5)
    True
    >>> line_gt > line.Line.from_spec(4, 4, 6, 6)
    False
    >>> line_gt > line.Line.from_spec(4, 4, 7, 7)
    False
    >>> line_gt > line.Line.from_spec(5, 5, 6, 6)
    False

#   __le__(other)
    >>> line_le  = line.Line.from_spec(4, 4, 6, 6)
    
    >>> line_le <= line.Line.from_spec(5, 5, 9, 9)
    True
    >>> line_le <= line.Line.from_spec(4, 4, 7, 7)
    True
    >>> line_le <= line.Line.from_spec(4, 4, 6, 6)
    True
    >>> line_le <= line.Line.from_spec(4, 4, 5, 5)
    False
    >>> line_le <= line.Line.from_spec(1, 1, 9, 9)
    False

#   __lt__(other)
    >>> line_lt = line.Line.from_spec(4, 4, 6, 6)
    
    >>> line_lt < line.Line.from_spec(5, 5, 6, 6)
    True
    >>> line_lt < line.Line.from_spec(4, 4, 7, 7)
    True
    >>> line_lt < line.Line.from_spec(4, 4, 6, 6)
    False
    >>> line_lt < line.Line.from_spec(4, 4, 5, 5)
    False
    >>> line_lt < line.Line.from_spec(1, 1, 7, 7)
    False

#   __ne__(other)
    >>> line_ne  = line.Line.from_spec(4, 4, 6, 6)
    
    >>> line_ne != line.Line.from_spec(5, 5, 6, 6)
    True
    >>> line_ne != line.Line.from_spec(4, 4, 5, 5)
    True
    >>> line_ne != line.Line.from_spec(4, 4, 6, 6)
    False

### part relations
#   is_a_subline_in_column(column)
    
    >>> line_control = line.Line.from_spec(1, 1, 2, 2)
    >>> line_01 = line.Line.from_spec(0, 0, 1, 1)
    >>> line_02 = line.Line.from_spec(0, 0, 2, 2)
    >>> line_03 = line.Line.from_spec(0, 0, 3, 3)
    >>> line_12 = line.Line.from_spec(1, 1, 2, 2)
    >>> line_13 = line.Line.from_spec(1, 1, 3, 3)
    >>> line_23 = line.Line.from_spec(2, 2, 3, 3)
    >>> line_45 = line.Line.from_spec(4, 4, 5, 5)

    >>> column_01 = sg_column.SGColumn([line_01])
    >>> column_02 = sg_column.SGColumn([line_02])
    >>> column_03 = sg_column.SGColumn([line_03])
    >>> column_12 = sg_column.SGColumn([line_12])
    >>> column_13 = sg_column.SGColumn([line_13])
    >>> column_23 = sg_column.SGColumn([line_23])
    >>> column_01_23 = sg_column.SGColumn([line_01, line_23])
    >>> column_01_45 = sg_column.SGColumn([line_01, line_45])
    >>> column_02_45 = sg_column.SGColumn([line_02, line_45])
    >>> column_03_45 = sg_column.SGColumn([line_03, line_45])
    >>> column_12_45 = sg_column.SGColumn([line_12, line_45])
    >>> column_13_45 = sg_column.SGColumn([line_13, line_45])
    >>> column_23_45 = sg_column.SGColumn([line_23, line_45])

    >>> line_control.is_a_subline_in_column(column_01)
    False
    >>> line_control.is_a_subline_in_column(column_02)
    True
    >>> line_control.is_a_subline_in_column(column_03)
    True
    >>> line_control.is_a_subline_in_column(column_12)
    True
    >>> line_control.is_a_subline_in_column(column_13)
    True
    >>> line_control.is_a_subline_in_column(column_23)
    False
    >>> line_control.is_a_subline_in_column(column_01_23)
    False
    >>> line_control.is_a_subline_in_column(column_01_45)
    False
    >>> line_control.is_a_subline_in_column(column_02_45)
    True
    >>> line_control.is_a_subline_in_column(column_03_45)
    True
    >>> line_control.is_a_subline_in_column(column_12_45)
    True
    >>> line_control.is_a_subline_in_column(column_13_45)
    True
    >>> line_control.is_a_subline_in_column(column_23_45)
    False

#   is_a_subline_of(other)
    >>> line_12 = line.Line.from_spec(1, 1, 2, 2)
    
    >>> line_12.is_a_subline_of(line.Line.from_spec(0, 0, 1, 1))
    False
    >>> line_12.is_a_subline_of(line.Line.from_spec(0, 0, 2, 2))
    True
    >>> line_12.is_a_subline_of(line.Line.from_spec(1, 1, 2, 2))
    True

### overlap relations
#   is_disjoint_left_of(other)
#   overlaps_tail_of(other)
#   overlaps_all_of(other)
#   overlaps_middle_of(other)
#   overlaps_head_of(other)
#   is_disjoint_right_of(other)

    >>> this    = line.Line.from_spec(2, 2, 5, 5)
    >>> that_01 = line.Line.from_spec(0, 0, 1, 1)
    >>> that_02 = line.Line.from_spec(0, 0, 2, 2)
    >>> that_03 = line.Line.from_spec(0, 0, 3, 3)
    >>> that_05 = line.Line.from_spec(0, 0, 5, 5)
    >>> that_07 = line.Line.from_spec(0, 0, 7, 7)
    >>> that_23 = line.Line.from_spec(2, 2, 3, 3)
    >>> that_25 = line.Line.from_spec(2, 2, 5, 5)
    >>> that_27 = line.Line.from_spec(2, 2, 7, 7)
    >>> that_34 = line.Line.from_spec(3, 3, 4, 4)
    >>> that_35 = line.Line.from_spec(3, 3, 5, 5)
    >>> that_37 = line.Line.from_spec(3, 3, 7, 7)
    >>> that_57 = line.Line.from_spec(5, 5, 7, 7)
    >>> that_67 = line.Line.from_spec(6, 6, 7, 7)

    >>> this.is_disjoint_left_of(that_01)
    False
    >>> this.is_disjoint_left_of(that_02)
    False
    >>> this.is_disjoint_left_of(that_03)
    False
    >>> this.is_disjoint_left_of(that_05)
    False
    >>> this.is_disjoint_left_of(that_07)
    False
    >>> this.is_disjoint_left_of(that_23)
    False
    >>> this.is_disjoint_left_of(that_25)
    False
    >>> this.is_disjoint_left_of(that_27)
    False
    >>> this.is_disjoint_left_of(that_34)
    False
    >>> this.is_disjoint_left_of(that_35)
    False
    >>> this.is_disjoint_left_of(that_37)
    False
    >>> this.is_disjoint_left_of(that_57)
    True
    >>> this.is_disjoint_left_of(that_67)
    True

    >>> this.overlaps_tail_of(that_01)
    False
    >>> this.overlaps_tail_of(that_02)
    False
    >>> this.overlaps_tail_of(that_03)
    False
    >>> this.overlaps_tail_of(that_05)
    False
    >>> this.overlaps_tail_of(that_07)
    False
    >>> this.overlaps_tail_of(that_23)
    False
    >>> this.overlaps_tail_of(that_25)
    False
    >>> this.overlaps_tail_of(that_27)
    True
    >>> this.overlaps_tail_of(that_34)
    False
    >>> this.overlaps_tail_of(that_35)
    False
    >>> this.overlaps_tail_of(that_37)
    True
    >>> this.overlaps_tail_of(that_57)
    False
    >>> this.overlaps_tail_of(that_67)
    False

    >>> this.overlaps_all_of(that_01)
    False
    >>> this.overlaps_all_of(that_02)
    False
    >>> this.overlaps_all_of(that_03)
    False
    >>> this.overlaps_all_of(that_05)
    False
    >>> this.overlaps_all_of(that_07)
    False
    >>> this.overlaps_all_of(that_23)
    True
    >>> this.overlaps_all_of(that_25)
    True
    >>> this.overlaps_all_of(that_27)
    False
    >>> this.overlaps_all_of(that_34)
    True
    >>> this.overlaps_all_of(that_35)
    True
    >>> this.overlaps_all_of(that_37)
    False
    >>> this.overlaps_all_of(that_57)
    False
    >>> this.overlaps_all_of(that_67)
    False

    >>> this.overlaps_middle_of(that_01)
    False
    >>> this.overlaps_middle_of(that_02)
    False
    >>> this.overlaps_middle_of(that_03)
    False
    >>> this.overlaps_middle_of(that_05)
    False
    >>> this.overlaps_middle_of(that_07)
    True
    >>> this.overlaps_middle_of(that_23)
    False
    >>> this.overlaps_middle_of(that_25)
    False
    >>> this.overlaps_middle_of(that_27)
    False
    >>> this.overlaps_middle_of(that_34)
    False
    >>> this.overlaps_middle_of(that_35)
    False
    >>> this.overlaps_middle_of(that_37)
    False
    >>> this.overlaps_middle_of(that_57)
    False
    >>> this.overlaps_middle_of(that_67)
    False

    >>> this.overlaps_head_of(that_01)
    False
    >>> this.overlaps_head_of(that_02)
    False
    >>> this.overlaps_head_of(that_03)
    True
    >>> this.overlaps_head_of(that_05)
    True
    >>> this.overlaps_head_of(that_07)
    False
    >>> this.overlaps_head_of(that_23)
    False
    >>> this.overlaps_head_of(that_25)
    False
    >>> this.overlaps_head_of(that_27)
    False
    >>> this.overlaps_head_of(that_34)
    False
    >>> this.overlaps_head_of(that_35)
    False
    >>> this.overlaps_head_of(that_37)
    False
    >>> this.overlaps_head_of(that_57)
    False
    >>> this.overlaps_head_of(that_67)
    False

    >>> this.is_disjoint_right_of(that_01)
    True
    >>> this.is_disjoint_right_of(that_02)
    True
    >>> this.is_disjoint_right_of(that_03)
    False
    >>> this.is_disjoint_right_of(that_05)
    False
    >>> this.is_disjoint_right_of(that_07)
    False
    >>> this.is_disjoint_right_of(that_23)
    False
    >>> this.is_disjoint_right_of(that_25)
    False
    >>> this.is_disjoint_right_of(that_27)
    False
    >>> this.is_disjoint_right_of(that_34)
    False
    >>> this.is_disjoint_right_of(that_35)
    False
    >>> this.is_disjoint_right_of(that_37)
    False
    >>> this.is_disjoint_right_of(that_57)
    False
    >>> this.is_disjoint_right_of(that_67)
    False

### add
#   can_be_merged_with(other)
#   test for non-collinear lines
    >>> line_0001 = line.Line.from_spec(0, 0, 0, 1)
    >>> line_26 = line.Line.from_short_spec(2, 6) #     ====
    >>> line_01 = line.Line.from_short_spec(0, 1) #   -
    >>> line_02 = line.Line.from_short_spec(0, 2) #   --
    >>> line_13 = line.Line.from_short_spec(1, 3) #    --
    >>> line_17 = line.Line.from_short_spec(1, 7) #    ------
    >>> line_24 = line.Line.from_short_spec(2, 4) #     --
    
                                                       #     ====
    
    >>> line_35 = line.Line.from_short_spec(3, 5) #      --
    >>> line_46 = line.Line.from_short_spec(4, 6) #       --
    >>> line_57 = line.Line.from_short_spec(5, 7) #        --
    >>> line_68 = line.Line.from_short_spec(6, 8) #         --
    >>> line_78 = line.Line.from_short_spec(7, 8) #          -
    
                                                       #     ====

    >>> line_26.can_be_merged_with(line_0001)
    You're trying to test non-collinear lines
    >>> line_26.can_be_merged_with(line_02)
    True
    >>> line_26.can_be_merged_with(line_68)
    True
    >>> line_26.can_be_merged_with(line_13)
    True
    >>> line_26.can_be_merged_with(line_57)
    True
    >>> line_26.can_be_merged_with(line_24)
    True
    >>> line_26.can_be_merged_with(line_46)
    True
    >>> line_26.can_be_merged_with(line_35)
    True
    >>> line_26.can_be_merged_with(line_17)
    True
    >>> line_26.can_be_merged_with(line_01)
    False
    >>> line_26.can_be_merged_with(line_78)
    False

#   merge(other)
    >>> line_k  = line.Line.from_short_spec(0, 6) #   ======
    >>> line_03 = line.Line.from_short_spec(0, 3) #   ---
    >>> line_06 = line.Line.from_short_spec(0, 6) #   ------
    >>> line_08 = line.Line.from_short_spec(0, 8) #   --------
    >>> line_34 = line.Line.from_short_spec(3, 4) #      -
    >>> line_36 = line.Line.from_short_spec(3, 6) #      ---
    >>> line_38 = line.Line.from_short_spec(3, 8) #      -----
    >>> line_68 = line.Line.from_short_spec(6, 8) #         --
    
    >>> print line_k.merge(line_03)
    (0, 0, 6, 6)
    >>> print line_k.merge(line_06)
    (0, 0, 6, 6)
    >>> print line_k.merge(line_08)
    (0, 0, 8, 8)
    >>> print line_k.merge(line_34)
    (0, 0, 6, 6)
    >>> print line_k.merge(line_36)
    (0, 0, 6, 6)
    >>> print line_k.merge(line_38)
    (0, 0, 8, 8)
    >>> print line_k.merge(line_68)
    (0, 0, 8, 8)

### subtract
#   subtract_line_tail(line)
    >>> minuend      = line.Line.from_spec(2, 2, 5, 5)
    >>> subtrahend_1 = line.Line.from_spec(1, 1, 3, 3)
    >>> subtrahend_2 = line.Line.from_spec(1, 1, 2, 2)
    
    >>> differences_1 = minuend.subtract_line_tail(subtrahend_1)
    >>> for a_line in differences_1:
    ...     print a_line
    (3, 3, 5, 5)
    >>> differences_2 = minuend.subtract_line_tail(subtrahend_2)
    The subtrahend does not overlap the tail of the minuend

#   subtract_line_middle(other)
    >>> minuend = line.Line.from_spec(2, 2, 5, 5)
    >>> subtrahend = line.Line.from_spec(3, 3, 4, 4)
    
    >>> line_differences = minuend.subtract_line_middle(subtrahend)
    >>> for difference in line_differences:
    ...     print difference
    (2, 2, 3, 3)
    (4, 4, 5, 5)

#   subtract_line_head(other)
    >>> minuend = line.Line.from_spec(2, 2, 5, 5)
    >>> subtrahend = line.Line.from_spec(4, 4, 6, 6)
    >>> line_differences = minuend.subtract_line_head(subtrahend)
    >>> for a_line in line_differences:
    ...     print a_line
    (2, 2, 4, 4)

