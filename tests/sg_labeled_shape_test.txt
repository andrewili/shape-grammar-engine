#   sg_labeled_shape_test.txt

    >>> import sg_line
    >>> import sg_labeled_point
    >>> import sg_labeled_shape
    >>> import sg_lp_partition
    >>> import sg_partition
    >>> import sg_shape

    ### construct, represent

    >>> def make_non_empty_shape():
    ...     line_0001 = sg_line.SGLine.from_spec(0, 0, 0, 1)
    ...     line_0010 = sg_line.SGLine.from_spec(0, 0, 1, 0)
    ...     shape = sg_shape.SGShape.from_lines([line_0010, line_0001])
    ...     return shape
    >>> def make_non_empty_lpoint_partition():
    ...     lpoint_33b = sg_labeled_point.SGLabeledPoint(3, 3, 'b')
    ...     lpoint_22b = sg_labeled_point.SGLabeledPoint(2, 2, 'b')
    ...     lpoint_11a = sg_labeled_point.SGLabeledPoint(1, 1, 'a')
    ...     lpoint_00a = sg_labeled_point.SGLabeledPoint(0, 0, 'a')
    ...     lpoint_partition = sg_lp_partition.SGLPPartition([lpoint_33b, lpoint_22b, lpoint_11a, lpoint_00a])
    ...     return lpoint_partition
    >>> empty_line_partition = sg_partition.SGPartition([])
    >>> empty_shape = sg_shape.SGShape(empty_line_partition)
    >>> empty_lpoint_partition = sg_lp_partition.SGLPPartition([])
    >>> non_empty_shape = make_non_empty_shape()
    >>> non_empty_lpoint_partition = make_non_empty_lpoint_partition()

    >>> lshape_empty = sg_labeled_shape.SGLabeledShape(empty_shape, empty_lpoint_partition)
    >>> lshape_shape = sg_labeled_shape.SGLabeledShape(non_empty_shape, empty_lpoint_partition)
    >>> lshape_lpoints = sg_labeled_shape.SGLabeledShape(empty_shape, non_empty_lpoint_partition)
    >>> lshape_lines_lpoints = sg_labeled_shape.SGLabeledShape(non_empty_shape, non_empty_lpoint_partition)

    >>> lshape_empty.is_empty()
    True
    >>> print lshape_empty
    ([], [])
    >>> print lshape_empty.listing()
    <empty labeled shape>

    >>> lshape_shape.is_empty()
    False
    >>> print lshape_shape
    ([(0, 0, 0, 1), (0, 0, 1, 0)], [])
    >>> print lshape_shape.listing()
    (0.0, 0.0):
        (0.0, 0.0, 0.0, 1.0)
    (90.0, 0.0):
        (0.0, 0.0, 1.0, 0.0)
    <no labeled points>

    >>> lshape_lpoints.is_empty()
    False
    >>> print lshape_lpoints
    ([], [(0, 0, a), (1, 1, a), (2, 2, b), (3, 3, b)])

    >>> print lshape_lpoints.listing()
    <no lines>
    a:
        (0.0, 0.0)
        (1.0, 1.0)
    b:
        (2.0, 2.0)
        (3.0, 3.0)

    >>> lshape_lines_lpoints.is_empty()
    False
    >>> print lshape_lines_lpoints
    ([(0, 0, 0, 1), (0, 0, 1, 0)], [(0, 0, a), (1, 1, a), (2, 2, b), (3, 3, b)])

    >>> print lshape_lines_lpoints.listing()
    (0.0, 0.0):
        (0.0, 0.0, 0.0, 1.0)
    (90.0, 0.0):
        (0.0, 0.0, 1.0, 0.0)
    a:
        (0.0, 0.0)
        (1.0, 1.0)
    b:
        (2.0, 2.0)
        (3.0, 3.0)

    >>> empty_lshape = sg_labeled_shape.SGLabeledShape.new_empty()
    >>> print empty_lshape
    ([], [])

    ### compare

__eq__(other), __ne__(other)
    >>> def make_lshape_test():
    ...     line_specs = [(0, 0, 1, 0), (0, 0, 1, 1), (0, 0, 0, 1)]
    ...     shape = sg_shape.SGShape.from_specs(line_specs)
    ...     lpoint_specs = [(2, 0, 'e'), (0, 2, 'n'), (2, 2, 'ne')]
    ...     lpoint_partition = sg_lp_partition.SGLPPartition.from_specs(lpoint_specs)
    ...     return sg_labeled_shape.SGLabeledShape(shape, lpoint_partition)
    >>> equal_line_specs = [(0, 0, 1, 0), (0, 0, 1, 1), (0, 0, 0, 1)]
    >>> equal_lpoint_specs = [(2, 0,'e'), (0, 2, 'n'), (2, 2, 'ne')]
    >>> equal_lpoint_partition = sg_lp_partition.SGLPPartition.from_specs(equal_lpoint_specs)
    >>> equal_shape = sg_shape.SGShape.from_specs(equal_line_specs)
    >>> unequal_line_specs = [(0, 0, 0, 2), (0, 0, 1, 1), (0, 0, 1, 0)]
    >>> unequal_lpoint_specs = [(0, 2, 'n'), (0, -2, 's')]
    >>> unequal_lpoint_partition = sg_lp_partition.SGLPPartition.from_specs(unequal_lpoint_specs)
    >>> unequal_shape = sg_shape.SGShape.from_specs(unequal_line_specs)

    >>> lshape_test = make_lshape_test()
    >>> print lshape_test
    ([(0, 0, 0, 1), (0, 0, 1, 0), (0, 0, 1, 1)], [(0, 2, n), (2, 0, e), (2, 2, ne)])

    >>> lshape_empty = sg_labeled_shape.SGLabeledShape.new_empty()
    >>> print lshape_empty
    ([], [])

    >>> lshape_no_shape = sg_labeled_shape.SGLabeledShape(empty_shape, equal_lpoint_partition)
    >>> print lshape_no_shape
    ([], [(0, 2, n), (2, 0, e), (2, 2, ne)])

    >>> lshape_no_lpoints = sg_labeled_shape.SGLabeledShape(equal_shape, empty_lpoint_partition)
    >>> print lshape_no_lpoints
    ([(0, 0, 0, 1), (0, 0, 1, 0), (0, 0, 1, 1)], [])

    >>> lshape_unequal_shape = sg_labeled_shape.SGLabeledShape(unequal_shape, equal_lpoint_partition)
    >>> print lshape_unequal_shape
    ([(0, 0, 0, 2), (0, 0, 1, 0), (0, 0, 1, 1)], [(0, 2, n), (2, 0, e), (2, 2, ne)])

    >>> lshape_unequal_lpoints = sg_labeled_shape.SGLabeledShape(equal_shape, unequal_lpoint_partition)
    >>> print lshape_unequal_lpoints
    ([(0, 0, 0, 1), (0, 0, 1, 0), (0, 0, 1, 1)], [(0, -2, s), (0, 2, n)])

    >>> lshape_equal = sg_labeled_shape.SGLabeledShape(equal_shape, equal_lpoint_partition)
    >>> print lshape_equal
    ([(0, 0, 0, 1), (0, 0, 1, 0), (0, 0, 1, 1)], [(0, 2, n), (2, 0, e), (2, 2, ne)])
    
    >>> lshape_test == lshape_empty
    False
    >>> lshape_test == lshape_no_shape
    False
    >>> lshape_test == lshape_no_lpoints
    False
    >>> lshape_test == lshape_unequal_shape
    False
    >>> lshape_test == lshape_unequal_lpoints
    False
    >>> lshape_test == lshape_equal
    True
    
    >>> lshape_test != lshape_empty
    True
    >>> lshape_test != lshape_no_shape
    True
    >>> lshape_test != lshape_no_lpoints
    True
    >>> lshape_test != lshape_unequal_shape
    True
    >>> lshape_test != lshape_unequal_lpoints
    True
    >>> lshape_test != lshape_equal
    False

is_a_sub_lshape_of(other)
    >>> def make_basic_shape():
    ...     basic_line_specs = [(0, 0, 1, 0), (0, 0, 1, 1), (0, 0, 0, 1)]
    ...     basic_shape = sg_shape.SGShape.from_specs(basic_line_specs)
    ...     return basic_shape
    >>> def make_basic_lpoints():
    ...     basic_lpoint_specs = [(2, 2, 'ne'), (2, 0, 'e'), (0, 2, 'n')]
    ...     basic_lpoints = sg_lp_partition.SGLPPartition.from_specs(basic_lpoint_specs)
    ...     return basic_lpoints
    >>> def make_bigger_shape():
    ...     bigger_line_specs = [(0, 0, 1, 0), (0, 0, 1, 1), (0, 0, 0, 1), (2, 2, 3, 3)]
    ...     bigger_shape = sg_shape.SGShape.from_specs(bigger_line_specs)
    ...     return bigger_shape
    >>> def make_bigger_lpoints():
    ...     bigger_lpoint_specs = [(2, 0, 'e'), (0, 2, 'n'), (2, 2, 'ne'), (0, -1, 's')]
    ...     bigger_lpoints = sg_lp_partition.SGLPPartition.from_specs(bigger_lpoint_specs)
    ...     return bigger_lpoints
    >>> def make_smaller_shape():
    ...     smaller_line_specs = [(0, 0, 1, 0), (0, 0, 0, 1)]
    ...     smaller_shape = sg_shape.SGShape.from_specs(smaller_line_specs)
    ...     return smaller_shape
    >>> def make_smaller_lpoints():
    ...     smaller_lpoint_specs = [(2, 0, 'e'), (0, 2, 'n')]
    ...     smaller_lpoints = sg_lp_partition.SGLPPartition.from_specs(smaller_lpoint_specs)
    ...     return smaller_lpoints

    >>> basic_shape = make_basic_shape()
    >>> basic_lpoints = make_basic_lpoints()
    >>> bigger_shape = make_bigger_shape()
    >>> bigger_lpoints = make_bigger_lpoints()
    >>> smaller_shape = make_smaller_shape()
    >>> smaller_lpoints = make_smaller_lpoints()

    >>> lshape_basic = sg_labeled_shape.SGLabeledShape(basic_shape, basic_lpoints)
    >>> lshape_bigger_shape = sg_labeled_shape.SGLabeledShape(bigger_shape, basic_lpoints)
    >>> lshape_bigger_lpoints = sg_labeled_shape.SGLabeledShape(basic_shape, bigger_lpoints)
    >>> lshape_smaller_shape = sg_labeled_shape.SGLabeledShape(smaller_shape, basic_lpoints)
    >>> lshape_smaller_lpoints = sg_labeled_shape.SGLabeledShape(basic_shape, smaller_lpoints)
    
    >>> lshape_basic.is_a_sub_lshape_of(lshape_empty)
    False

    >>> lshape_basic.is_a_sub_lshape_of(lshape_bigger_shape)
    True
    
    ??? lshape_basic.is_a_sub_lshape_of(lshape_bigger_lpoints)
    True
    ??? lshape_basic.is_a_sub_lshape_of(lshape_smaller_shape)
    False
    ??? lshape_basic.is_a_sub_lshape_of(lshape_smaller_lpoints)
    False
    ??? lshape_basic.is_a_sub_lshape_of(lshape_equal)
    True

    ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### 


### __add__(other) ###
    
    _|   |_       ___       _|___|_
                 |   |       |   |
       X     +   | X |   =   | X |
    _     _      |___|      _|___|_
     |   |                   |   |
    
    ??? def make_ells_for_add():
    ...     line0414 = make_line_from_spec(0, 4, 1, 4)
    ...     line0111 = make_line_from_spec(0, 1, 1, 1)
    ...     line1011 = make_line_from_spec(1, 0, 1, 1)
    ...     line1415 = make_line_from_spec(1, 4, 1, 5)
    ...     line4041 = make_line_from_spec(4, 0, 4, 1)
    ...     line4151 = make_line_from_spec(4, 1, 5, 1)
    ...     line4445 = make_line_from_spec(4, 4, 4, 5)
    ...     line4454 = make_line_from_spec(4, 4, 5, 4)
    ...     lines = [line1011, line1415, line4041, line4445, line0111, line4151, line0414, line4454]
    ...     return sg_shape.SGShape.from_lines(lines)
    ??? def make_labeled_ells_for_add():
    ...     ells = make_ells_for_add()
    ...     lpoint_partition = {'X': set([(3, 3)])}
    ...     return sg_labeled_shape.SGLabeledShape(ells, lpoint_partition)
    ??? def make_square_for_add():
    ...     line1114 = make_line_from_spec(1, 1, 1, 4)
    ...     line1141 = make_line_from_spec(1, 1, 4, 1)
    ...     line1444 = make_line_from_spec(1, 4, 4, 4)
    ...     line4144 = make_line_from_spec(4, 1, 4, 4)
    ...     lines = [line1114, line1141, line1444, line4144]
    ...     return sg_shape.SGShape.from_lines(lines)
    ??? def make_labeled_square_for_add():
    ...     square = make_square_for_add()
    ...     lpoint_partition = {'X': set([(3.0, 3.0)])}
    ...     return sg_labeled_shape.SGLabeledShape(square, lpoint_partition)
    ??? labeled_ells = make_labeled_ells_for_add()
    ??? labeled_square = make_labeled_square_for_add()
    ??? hash = labeled_ells + labeled_square
    
    ??? print hash.listing()
    (0.0, 1.0):
        (1.0, 0.0, 1.0, 5.0)
    (0.0, 4.0):
        (4.0, 0.0, 4.0, 5.0)
    (90.0, 1.0):
        (0.0, 1.0, 5.0, 1.0)
    (90.0, 4.0):
        (0.0, 4.0, 5.0, 4.0)
    X:
        (3.0, 3.0)

add_lpoint_partitions(lpoint_partition_1, lpoint_partition_2)
    
    ??? empty_lpp_1 = {}
    ??? empty_lpp_2 = {}
    ??? non_empty_lpp_1 = {'A': set([(1, 1)]), 'B': set([(2, 2)])}
    ??? non_empty_lpp_2 = {'A': set([(1, 1)]), 'B': set([(3, 3)]), 'C': set([(4, 4)])}
    
    Case 1: lpp_1 and lpp_2 are empty
    ??? new_lpp_1 = empty_lshape.add_lpoint_partitions(empty_lpp_1, empty_lpp_2)
    ??? print empty_lshape.get_lpoint_partition_listing(new_lpp_1)
    <no labeled points>
    
    Case 2: lpp_1 is empty
    ??? new_lpp_2 = empty_lshape.add_lpoint_partitions(empty_lpp_1, non_empty_lpp_1)
    ??? print empty_lshape.get_lpoint_partition_listing(new_lpp_2)
    A:
        (1.0, 1.0)
    B:
        (2.0, 2.0)
    
    Case 3: lpp_2 is empty
    ??? new_lpp_3 = empty_lshape.add_lpoint_partitions(non_empty_lpp_2, empty_lpp_1)
    ??? print empty_lshape.get_lpoint_partition_listing(new_lpp_3)
    A:
        (1.0, 1.0)
    B:
        (3.0, 3.0)
    C:
        (4.0, 4.0)
    
    Case 4: lpp_1 and lpp_2 are non-empty
    ??? new_lpp_4 = empty_lshape.add_lpoint_partitions(non_empty_lpp_1, non_empty_lpp_2)
    ??? print empty_lshape.get_lpoint_partition_listing(new_lpp_4)
    A:
        (1.0, 1.0)
    B:
        (2.0, 2.0)
        (3.0, 3.0)
    C:
        (4.0, 4.0)

### __sub__(other) ###
    
    ??? shape = make_shape_from_line_specs([(40, 40, 40, 60), (40, 40, 60, 40), (40, 60, 60, 60), (60, 60, 60, 60)])
    ??? lpoints = {'a': set([(50, 50)])}
    ??? lshape = make_lshape_from_shape_and_lpoints(shape, lpoints)
    ??? bigger_shape = make_shape_from_line_specs([(20, 40, 80, 40), (20, 60, 80, 60), (40, 20, 40, 80), (60, 20, 60, 80)])
    ??? bigger_lpoints = {'a': set([(30, 50), (50, 50)])}
    ??? bigger_lshape = make_lshape_from_shape_and_lpoints(bigger_shape, bigger_lpoints)
    
    ??? (lshape - bigger_lshape).listing()
    <no lines>
    <no labeled points>
    ??? (bigger_lshape - lshape).listing()
    (0.0, 40.0):
        (40.0, 20.0, 40.0, 40.0)
        (40.0, 60.0, 40.0, 60.0)
    (0.0, 60.0):
        (60.0, 20.0, 40.0, 60.0)
        (60.0, 60.0, 60.0, 80.0)
    (90.0, 40.0):
        (20.0, 40.0, 40.0, 40.0)
        (60.0, 40.0, 80.0, 40.0)
    (90.0, 60.0):
        (20.0, 60.0, 40.0, 60.0)
        (60.0, 60.0, 80.0, 60.0)
    a:
        (30.0, 50.0)
    ??? (lshape - lshape).listing()
    <no lines>
    <no labeled points>
    ??? lshape - empty_lshape
    (0.0, 40.0):
        (40.0, 40.0, 40.0, 60.0)
    (0.0, 60.0):
        (60.0, 40.0, 60.0, 60.0)
    (90.0, 40.0):
        (40.0, 40.0, 60.0, 40.0)
    (90.0, 60.0):
        (40.0, 60.0, 60.0, 60.0)
    <no labeled points>
    ??? (empty_lshape - lshape).listing()
    <no lines>
    <no labeled points>

### subtract_lpoint_partitions(partition_1, partition_2) ### Reduce to match method
    
    ??? lpoint_partition = {'a': set([(1, 1)]), 'b': set([(2, 2), (3, 3)])}
    ??? smaller_partition = {'a': set([(1, 1)]), 'b': set([(2, 2), (3, 3), (4, 4)])}
    ??? smallest_partition = {'b': set([(3, 3)])}
    ??? empty_partition = {}
    
    ??? empty_lshape.subtract_lpoint_partitions(lpoint_partition, smaller_partition)
    {}
    ??? empty_lshape.subtract_lpoint_partitions(lpoint_partition, smallest_partition)
    {'a': set([(1, 1)]), 'b': set([(2, 2)])}
    ??? empty_lshape.subtract_lpoint_partitions(smaller_partition, lpoint_partition)
    {'b': set([(4, 4)])}
    ??? empty_lshape.subtract_lpoint_partitions(smallest_partition, lpoint_partition)
    {}
    ??? empty_lshape.subtract_lpoint_partitions(lpoint_partition, lpoint_partition)
    {}
    ??? empty_lshape.subtract_lpoint_partitions(lpoint_partition, empty_partition) == {'a': set([(1, 1)]), 'b': set([(2, 2), (3, 3)])}
    True
    ??? empty_lshape.subtract_lpoint_partitions(empty_partition, lpoint_partition)
    {}

### subtract_non_empty_lpoint_partitions(partition_1, partition_2)
    
    ??? lpoint_partition = {'a': set([(1, 1)]), 'b': set([(2, 2), (3, 3)])}
    ??? smaller_partition = {'a': set([(1, 1)]), 'b': set([(2, 2), (3, 3), (4, 4)])}
    ??? smallest_partition = {'b': set([(3, 3)])}
    
    ??? empty_lshape.subtract_nonempty_lpoint_partitions(lpoint_partition, smaller_partition)
    {}
    ??? empty_lshape.subtract_nonempty_lpoint_partitions(lpoint_partition, smallest_partition)
    {'a': set([(1, 1)]), 'b': set([(2, 2)])}
    ??? empty_lshape.subtract_nonempty_lpoint_partitions(smaller_partition, lpoint_partition)
    {'b': set([(4, 4)])}
    ??? empty_lshape.subtract_nonempty_lpoint_partitions(smallest_partition, lpoint_partition)
    {}
    ??? empty_lshape.subtract_nonempty_lpoint_partitions(lpoint_partition, lpoint_partition)
    {}

### make_lshape_from() ###

make_lshape_from(lines, lpoints)                         # 1.2

    ??? def make_lines_for_lshape():
    ...     line_1 = make_line_from_spec(0, 0, 0, 1)
    ...     line_2 = make_line_from_spec(0, 0, 1, 0)
    ...     return [line_1, line_2]
    ??? lines = make_lines_for_lshape()
    ??? def make_lpoints_for_lshape():
    ...     lpoint = make_lpoint_from_spec(1, 1, 'a')
    ...     return [lpoint]
    ??? lpoints = make_lpoints_for_lshape()
    
    ??? lshape = empty_lshape.make_lshape_from(lines, lpoints)
    
    ??? print lshape.listing()
    (0.0, 0.0):
        (0.0, 0.0, 0.0, 1.0)
    (90.0, 0.0):
        (0.0, 0.0, 1.0, 0.0)
    a:
        (1.0, 1.0)

get_lpoint_partition_from(lpoints)                              # 1.2.1
    
    ??? def make_lpoints_for_lpoint_partition():
    ...     p1 = make_lpoint_from_spec(1, 0, 'a')
    ...     p2 = make_lpoint_from_spec(1, 1, 'a')
    ...     p3 = make_lpoint_from_spec(2, 0, 'b')
    ...     p4 = make_lpoint_from_spec(2, 1, 'b')
    ...     return [p1, p2, p3, p4]
    ??? lpoints = make_lpoints_for_lpoint_partition()
    
    ??? partition = empty_lshape.get_lpoint_partition_from(lpoints)

    ??? print empty_lshape.get_lpoint_partition_listing(partition)
    a:
        (1.0, 0.0)
        (1.0, 1.0)
    b:
        (2.0, 0.0)
        (2.0, 1.0)

### get_element_specs() ###

get_element_specs()

get_line_specs()
    
    ??? def make_shape_for_line_specs():
    ...     line_n = make_line_from_spec(0, 0, 0, 1)
    ...     line_ne = make_line_from_spec(0, 0, 1, 1)
    ...     line_e = make_line_from_spec(0, 0, 1, 0)
    ...     lines = [line_n, line_ne, line_e]
    ...     return sg_shape.SGShape.from_lines(lines)
    ??? def make_lshape_for_line_specs():
    ...     shape = make_shape_for_line_specs()
    ...     lpoint_partition = {'a': set([(1, 1)]), 'b': set([(1, 1), (2, 2)]), 'c': set([(3, 3)])}
    ...     return sg_labeled_shape.SGLabeledShape(shape, lpoint_partition)
    
    ??? lshape = make_lshape_for_line_specs()
    ??? lshape.get_line_specs()
    [(0, 0, 0, 1), (0, 0, 1, 0), (0, 0, 1, 1)]

get_lpoint_specs_from(lpoint_partition)
    
    ??? def make_lpoint_partition_for_lpoint_specs():
    ...     lpoint_partition = {'a': set([(10, 10)]), 'b': set([(20, 20), (25, 25)]), 'c': set([(30, 30), (33, 33), (36, 36)])}
    ...     return lpoint_partition
    
    ??? lpoint_partition = make_lpoint_partition_for_lpoint_specs()
    ??? empty_lshape.get_lpoint_specs_from(lpoint_partition)
    [(10, 10, 'a'), (20, 20, 'b'), (25, 25, 'b'), (30, 30, 'c'), (33, 33, 'c'), (36, 36, 'c')]

get_colabeled_lpoint_specs_from(colabeled_point_specs, label)
    
    ??? def make_colabeled_point_specs():
    ...     return [(1, 1), (2, 2), (3, 3)]
    
    ??? colabeled_point_specs = make_colabeled_point_specs()
    ??? label = 'a'
    ??? empty_lshape.get_colabeled_lpoint_specs_from(colabeled_point_specs, label)
    [(1, 1, 'a'), (2, 2, 'a'), (3, 3, 'a')]

old ### get_elements() ### old ### from here down
    
    ??? line0088 = make_line_from_spec(0, 0, 8, 8)
    ??? line0880 = make_line_from_spec(0, 8, 8, 0)
    ??? lines_in = [line0088, line0880]
    ??? p40x = make_lpoint(4, 0, 'x')
    ??? p04y = make_lpoint(0, 4, 'y')
    ??? points_in = [p40x, p04y]
    ??? shape = empty_shape.make_shape_from(lines_in, points_in)
    ??? elements = shape.get_elements()
    ??? lines_out = elements[0]
    ??? points_out = elements[1]
    ??? string = '(['
    ??? for line in sorted(lines_out):
    ...     string += '%s ' % line.__str__()
    ??? string += '], ['
    ??? for point in sorted(points_out):
    ...     string += '%s ' % point
    ??? string += '])'
    ??? print string
    ([(0, 0, 8, 8) (0, 8, 8, 0) ], [(0.0, 4.0, y) (4.0, 0.0, x) ])

get_lines_from(line_partition)
    
    ??? line0011 = make_line_from_spec(0, 0, 1, 1)
    ??? line2233 = make_line_from_spec(2, 2, 3, 3)
    ??? line_partition = {(45, 0): set([line0011, line2233])}
    ??? line_elements = empty_shape.get_lines_from(line_partition)
    ??? for element in sorted(line_elements):
    ...     print element
    (0.0, 0.0, 1.0, 1.0)
    (2.0, 2.0, 3.0, 3.0)

get_lines()                                     #   unneeded?
    
    ??? line_0001 = make_line_from_spec(0, 0, 0, 1)
    ??? line_0011 = make_line_from_spec(0, 0, 1, 1)
    ??? line_2233 = make_line_from_spec(2, 2, 3, 3)
    ??? line_0010 = make_line_from_spec(0, 0, 1, 0)
    ??? line_partition = {(0, 0): [line_0001], (45, 0): [line_0011, line_2233], (90, 0): [line_0010]}
    ??? shape = sg_shape.SGShape(line_partition)
    ??? lines = shape.get_lines()
    ??? for line in sorted(lines):
    ...     print line
    (0.0, 0.0, 0.0, 1.0)
    (0.0, 0.0, 1.0, 0.0)
    (0.0, 0.0, 1.0, 1.0)
    (2.0, 2.0, 3.0, 3.0)
    

get_points_from(point_partition)                #   to SGLabeledShape
    
    ??? p11a = make_lpoint(1, 1, 'a')
    ??? p22a = make_lpoint(2, 2, 'a')
    ??? p33b = make_lpoint(3, 3, 'b')
    ??? p44b = make_lpoint(4, 4, 'b')
    ??? point_partition = {'a': set([p11a, p22a]), 'b': set([p33b, p44b])}
    ??? point_elements = empty_shape.get_points_from(point_partition)
    ??? for element in sorted(point_elements):
    ...     print element
    (1.0, 1.0, a)
    (2.0, 2.0, a)
    (3.0, 3.0, b)
    (4.0, 4.0, b)

make_shape_from(), __init__(), listing()
    
    empty shape
    
    ??? empty_shape = sg_shape.SGShape()
    ??? print empty_shape.listing()
    no lines
    no points

    2 disjoint collinear horizontal lines, 1 vertical line: _ | _
    
    ??? h0010 = make_line_from_spec(0, 0, 1, 0)
    ??? h3040 = make_line_from_spec(3, 0, 4, 0)
    ??? v2022 = make_line_from_spec(2, 0, 2, 2)
    ??? line_list = [h0010, h3040, v2022]
    ??? line_shape = empty_shape.make_shape_from(line_list, [])
    ??? print line_shape.listing()
    (0.0, 2):
        (2, 0, 2, 2)
    (90.0, 0):
        (0, 0, 1, 0)
        (3, 0, 4, 0)
    no points

    2 labels, 4 labeled points
    
    ??? p00 = make_lpoint(0, 0, 'a')
    ??? p01 = make_lpoint(0, 1, 'b')
    ??? p10 = make_lpoint(1, 0, 'a')
    ??? p11 = make_lpoint(1, 1, 'b')
    ??? point_list = [p00, p01, p10, p11]
    ??? point_shape = empty_shape.make_shape_from([], point_list)
    ??? print point_shape.listing()
    no lines
    a:
        (0.0, 0.0, a)
        (1.0, 0.0, a)
    b:
        (0.0, 1.0, b)
        (1.0, 1.0, b)

    lines and labeled points from above
    
    ??? print empty_shape.make_shape_from(line_list, point_list).listing()
    (0.0, 2):
        (2, 0, 2, 2)
    (90.0, 0):
        (0, 0, 1, 0)
        (3, 0, 4, 0)
    a:
        (0.0, 0.0, a)
        (1.0, 0.0, a)
    b:
        (0.0, 1.0, b)
        (1.0, 1.0, b)

    ###
line_partition_from_lines(line_list)
    ??? line_1 = make_line_from_spec(0, 0, 1, 1)
    ??? line_2 = make_line_from_spec(1, 1, 2, 2)
    ??? line_3 = make_line_from_spec(3, 3, 5, 3)
    ??? line_list = [line_1, line_2, line_3]
    ??? line_partition = sg_shape.SGShape.line_partition_from_lines(line_list)
    ??? print empty_shape.get_line_partition_listing(line_partition)
    (45.0, 0.0):
        (0.0, 0.0, 1.0, 1.0)
        (1.0, 1.0, 2.0, 2.0)
    (90.0, 3.0):
        (3.0, 3.0, 5.0, 3.0)
